<?xml version="1.0" encoding="utf-8" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>tanikoのぶろぐ</title>
<link href="https://taniko.github.io"></link>
<updated>2020-12-13T00:41:34+00:00</updated>
<id>urn:uuid:c90b8eeb-3954-eaf8-0b65-eae8678a9ee4</id>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>GitHubのPRレビュー依頼をSlackに通知する</title>
<link href="https://taniko.github.io/article/2020/12/130034"></link>
<id>urn:uuid:2150101f-e950-a006-8789-c440c06e20e0</id>
<updated>2020-12-13T00:34:39+00:00</updated>
<summary type="html"><![CDATA[<p>この記事は<a href="https://qiita.com/advent-calendar/2020/dmm">DMMグループ Advent Calendar 2020</a> 13日目の記事です。</p>
<h2>初めに</h2>
<p>プルリクエストのレビュー依頼をSlack上で行っていました。
PRを作成するたびに、Slackで「レビューをお願いします」と書くのが面倒だったので、レビュー依頼を半自動化させました。<br />
BotによるDMもしくは、チャンネルへのメッセージによる通知を行います。</p>
<p>GitHubのPRまたはIssueにラベルをつけるとSlackにメッセージが飛びます。
個人、グループメンションに対応しています。Reviewersにも対応。
リポジトリのHooks設定、YAML設定するだけ。</p>
<p>１年以上前にコードを書きました。TypeScriptの知識も少なかったので、コードが汚いですが、ご了承ください。　　</p>
<h2>uzr</h2>
<p>弊社では、GitHub Enterpriseのアカウント名とSlackのアカウント名が同じです。多くの人は、 <code>aratani-yuya</code> みたいに、<code>姓-名</code> の形になっています。<br />
そのため、 GitHubのアカウント名をそのまま使えば、Slackへの通知が可能になっています。もしも違うのであれば、変換の処理を入れる必要がありますが、今回はそれを省きました。<br />
PRのラベルを指定のものにする、もしくはReviewersに誰かを追加すると、レビュー依頼が自動で出されるようになります。</p>
<h3>レビュー依頼設定</h3>
<p>1リポジトリに対して、複数のラベルの設定ができるようになっています。これは複数のチームが同じリポジトリを操作する可能性があるためです。</p>
<pre><code>// setting/pr.yml
owner/repo:
  - label: Team-A
    channel: team-a-channel
    mentions:
      - team-a
    text: 'お手すきの際にレビューお願いします。'
</code></pre>
<h3>Slack通知の流れ</h3>
<p><img src="/article/2020/12/130034/uzr.png" alt="" /></p>
<ol>
<li>GitHubのWebhookをCloud Functionsに送る</li>
<li>KMSからWebhookのSecret、SlackのTokenを取得</li>
<li>Cloud Storageから設定を取得</li>
<li>Slackにメッセージを送る<ul>
<li>DM</li>
<li>チャンネルへメンション</li>
</ul>
</li>
</ol>
<p>以下のようなメッセージがチャンネル宛、もしくはDMで届きます。</p>
<pre><code class="language-text">@team-a
お手すきの際にレビューお願いします。

[PRタイトル]
by [User]
https://github.com/owner/repo/pull/1
</code></pre>
<h3>ソースコード</h3>
<pre><code class="language-javascript">exports.uzr = async function(req: Request, res: Response) {
  // Pingリクエストのチェック
  if (isPingRequest(req)) {
    return res.status(200).send('pong');
  }
  // GitHub WebhookのSecretの取得
  const secret = (await decrypt(env('GITHUB_SECRET', ''), KMS_SETTING)).plaintext.toString().trim();
  const github_host = env('GITHUB_HOST', '') as string;

  // GitHub Enterpriseからのアクセスかを確認
  if (!isValidIP(req.ip) || !validate(req, secret, github_host)) {
    return res.status(403).send('');
  }

  // labeled、review_requestedのWebhookかを確認
  if (!isAllowRequest(req)) {
    res.status(200).send('Not support request');
    return;
  }

  // Webhookのリクエストを判断
  const type = detectRequestType(req);
  const storage = new Storage();
  const bucket = storage.bucket(BUCKET_NAME);
  let message: Message | undefined;
  try {
    // Slackのメッセージを組み立て
    if (type === RequestType.REVIEW) {
      const data: PullRequest = req.body;
      const targets = parseJsonToReviewTargetsByLabel(data.repository.full_name, await getYamlFile(bucket.file(SETTING_FILE_PR)));
      message = createMessagesByLabel(targets, data, type);
    } else if (type === RequestType.REVIEW_REQUEST) {
      const data: ReviewerRequest = req.body;
      const users: User[] = await getUsers(bucket.file(USERS_FILE))
      const targets = getTargetsBySlackUsers(users, data.requested_reviewer.login);
      message = createMessageByReviewer(targets, data, type);
    } else if (type === RequestType.ISSUE) {
      const data: IssueRequest = req.body;
      const targets = parseJsonToReviewTargetsByLabel(data.repository.full_name, await getYamlFile(bucket.file(SETTING_FILE_ISSUE)));
      message = createMessagesByLabel(targets, data, type);
    } else {
      res.status(200).send('Not support request');
      return;
    }
  } catch (e) {
    console.log(e.toString());
    res.status(500).send('error');
    return;
  }

  if (message != undefined) {
    // Slackにメッセージを送信
    const groups = await getUserGroups(bucket.file(GROUPS_FILE));
    const slack_token = (await decrypt(env('SLACK_TOKEN', ''), KMS_SETTING)).plaintext.toString().trim();
    const client = new WebClient(slack_token);
    await send(client, message, groups);
  }
  res.status(200).send('ok');
};
</code></pre>
<h2>終わりに</h2>
<p>主に弊チームで運用されているレビュー依頼半自動化のコードでした。リポジトリは<a href="https://github.com/taniko/uzr_pr">こちら</a><br />
レビュー依頼だけでなく、PRへのコメントの通知も、行えるようにできたらいいなと思います。</p>
<p>明日は <a href="https://qiita.com/yo_chan_yo_chan">yo_chan_yo_chan</a> さんです。</p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>文章生成をやってみる</title>
<link href="https://taniko.github.io/article/2018/09/202328"></link>
<id>urn:uuid:a141ba75-07d7-5764-c564-e6da67bf26f7</id>
<updated>2018-09-20T14:28:18+00:00</updated>
<summary type="html"><![CDATA[<p>文章作成機(?)を作る方法をなるべく簡単(?)に説明したいと思います. とても, 無能なものです.  </p>
<h2>はじめに</h2>
<p>どんなものかと簡単に説明すると, 複数の文章を元に, 文章を作成するというものです.<br />
PHPで雑に実装したので, それもどうぞ.
<a href="https://github.com/taniko/udon">https://github.com/taniko/udon</a></p>
<h2>仕組みを雑に</h2>
<p>まずはじめに, 元となるデータを用意します. 簡単にするために, 以下のような文章を用意します. 猫派の方はごめんなさい.</p>
<ol>
<li>私は犬が好きです</li>
<li>私は猫が嫌いです</li>
</ol>
<p>この2文を形態素解析をすると以下のようになったとします. MeCabとか使えばいいと思います.</p>
<ol>
<li>私 は 犬 が 好き です</li>
<li>私 は 猫 が 嫌い です</li>
</ol>
<p>これを1つの状態遷移図で表すと以下のようになります.</p>
<p><img src="/article/2018/09/202328/flow_1.png" alt="" /></p>
<p>この状態遷移図から文章を生成してみます.</p>
<ol>
<li>私は犬が好きです (本来の文章)</li>
<li>私は猫が嫌いです (本来の文章)</li>
<li>私は犬が嫌いです (新たな文章)</li>
<li>私は猫が好きです (新たな文章)</li>
</ol>
<p>新たに2つの文章が得られました. 簡単ですね. そんなわけで, 以上, 文章作成機の仕組みでした.</p>
<h2>もう少し面白く</h2>
<p>仕組み自体は, あまり変わりませんが, 次の状態を現在の状態のみに依存させると面白くなるので, それについての話です. 実装したのはこっち.  </p>
<p>以下のような3文があったとします.</p>
<ol>
<li>私 は 犬 が 好き です</li>
<li>私 は 猫 が 嫌い です</li>
<li>私 が し ます</li>
</ol>
<p>これを状態遷移図に書き起こします.
<img src="/article/2018/09/202328/flow_2.png" alt="" /></p>
<p>今までの通りにやると, 以下の5文が生成できます.</p>
<ol>
<li>私は犬が好きです (本来の文章)</li>
<li>私は猫が嫌いです (本来の文章)</li>
<li>私がします (本来の文章)</li>
<li>私は犬が嫌いです (新たな文章)</li>
<li>私は猫が好きです (新たな文章)</li>
</ol>
<p>もし, 次の状態を決めるのが, <code>現在の状態のみに依存</code>するとなると以下のような表と図ができます.  </p>
<table>
<thead>
<tr><th align="left">現在の状態</th><th align="left">次の状態</th><th align="left">確率</th></tr>
</thead>
<tbody>
<tr><td align="left">私</td><td align="left">は</td><td align="left">2/3</td></tr>
<tr><td align="left">私</td><td align="left">が</td><td align="left">1/3</td></tr>
<tr><td align="left">は</td><td align="left">犬</td><td align="left">1/2</td></tr>
<tr><td align="left">は</td><td align="left">猫</td><td align="left">1/2</td></tr>
<tr><td align="left">犬</td><td align="left">が</td><td align="left">1/2</td></tr>
<tr><td align="left">猫</td><td align="left">が</td><td align="left">1/2</td></tr>
<tr><td align="left">が</td><td align="left">し</td><td align="left">1/3</td></tr>
<tr><td align="left">が</td><td align="left">好き</td><td align="left">1/3</td></tr>
<tr><td align="left">が</td><td align="left">嫌い</td><td align="left">1/3</td></tr>
<tr><td align="left">し</td><td align="left">ます</td><td align="left">1/1</td></tr>
<tr><td align="left">好き</td><td align="left">です</td><td align="left">1/1</td></tr>
<tr><td align="left">嫌い</td><td align="left">です</td><td align="left">1/1</td></tr>
</tbody>
</table>
<p><img src="/article/2018/09/202328/flow_3.png" alt="" /></p>
<p>こうすることで, 新たに以下のような文が生成できるようになります.</p>
<ul>
<li>私が好きです</li>
<li>私が嫌いです</li>
</ul>
<p>このように, <code>現在の状態のみに依存</code>させると, 新たな文章が作成できるようになりました. 実装するなら, 下の表みたいに, 文の頭に<code>BOS(Begin of Sentence)</code>, 文の終わりに<code>EOS(End of Sentence)</code>などを差し込んで, どの語から始めることができ, どの語で終わることができるのかを明確にした方がいいと思います.</p>
<table>
<thead>
<tr><th align="left">現在の状態</th><th align="left">次の状態</th><th align="left">確率</th></tr>
</thead>
<tbody>
<tr><td align="left">BOS</td><td align="left">私</td><td align="left">3/3</td></tr>
<tr><td align="left">ます</td><td align="left">EOS</td><td align="left">1/1</td></tr>
<tr><td align="left">です</td><td align="left">EOS</td><td align="left">1/1</td></tr>
</tbody>
</table>
<p>ちなみに, 私のツイートから生成された文章はこんな漢字です.</p>
<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">記号とか品詞とか全く考えずにやるとこんな感じで, ゴミが生成されます. <a href="https://t.co/erAWuavniZ">pic.twitter.com/erAWuavniZ</a></p>&mdash; たにこ (@hrgruri) <a href="https://twitter.com/hrgruri/status/1013721468583141376?ref_src=twsrc%5Etfw">2018年7月2日</a></blockquote>
<p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<p>おしまい.</p>
<h2>調べると幸せになる用語</h2>
<ul>
<li>MeCab</li>
<li>mecab-ipadic-neologd</li>
<li>マルコフ連鎖</li>
</ul>
<h2>おわりに</h2>
<p>PassCodeの"Tonight/Taking you out"を買いました. ライブDVDがほしかったので. (下の映像は入っていないです.)</p>
<p>PassCode - ONE STEP BEYON
<iframe width="560" height="315" src="https://www.youtube.com/embed/GObrpzFp2lA" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></p>
<p>PassCode - Tonight
<iframe width="560" height="315" src="https://www.youtube.com/embed/YzNXj9a6blE" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>Laravelが 201 Createdを返すってさ</title>
<link href="https://taniko.github.io/article/2018/04/221906"></link>
<id>urn:uuid:42d8d44c-d796-70b3-e6fb-8b0821b30f37</id>
<updated>2018-04-22T10:06:01+00:00</updated>
<summary type="html"><![CDATA[<p>Laravel 5.6での話です. 5.6から, 新たにモデルを作成した際に<code>200 OK</code>ではなく, <code>201 Created</code>を返すようになったってだけの話です. (今更?)</p>
<h2>どういうことか</h2>
<p>LaravelをAPIとして利用していた時に, Eloquentモデルを返した際に, <code>200</code>だったのが, <code>201</code>に変更になりました.  </p>
<pre><code class="language-php">// app/Http/Controllers/PostController.php
&lt;?php

namespace App\Http\Controllers;

use App\Post;
use App\Http\Requests\Post\CreateRequest;

class PostController extends Controller
{
    public function create(CreateRequest $request)
    {
        return $request
            -&gt;user()
            -&gt;posts()
            -&gt;save(Post::make($request-&gt;only(['text'])));
    }
}
</code></pre>
<p>こんな感じのコードがあった場合, 5.5までだと<code>200 OK</code>で新規に作成されたPostのデータがレスポンスとして, 返ってきていました. しかし, 5.6からは<code>201 Created</code>とPostのデータが返ってくるようになりました.<br />
特に副作用がなさそうですが, テストやライブラリで<code>200</code>かを使っていれば思わぬ動作をしてしまいます. 皆さんは, axiosとかでasync/awaitとかthen/catchとか使っているので大丈夫ですよね. 私はPHPUnitで<code>assertStatus(200)</code>とかしていたのでテストが転けた.</p>
<p>地味な変更点ではあるかと思いますが, せっかく<code>201 Created</code>という, ちゃんと意味があるものがあるので, 嬉しいですね.</p>
<h2>ちなみに</h2>
<p>この話自体はLaravel 5.5の時に出ていて, <a href="https://github.com/laravel/framework/pull/21603">PR</a>も出されていましたが, バグフィックスとかではなく, 破壊的変更であったため, 見送られ, 5.6で<a href="https://github.com/laravel/framework/pull/21625/">PR</a>がマージされました. 仕組み自体はRouterでレスポンス(コントローラでreturnしたもの)が<code>Illuminate\Database\Eloquent\Model</code>で,<code>wasRecentlyCreated</code>が<code>true</code>だったら<code>201 Created</code>で返すって感じです. 詳しくは<a href="https://github.com/mathieutu/framework/blob/f8af1166169d98a12af54aae8ceff87cea55bbbd/src/Illuminate/Routing/Router.php#L704-L705">コード</a>を.</p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>PHPの面白いところ</title>
<link href="https://taniko.github.io/article/2018/04/060522"></link>
<id>urn:uuid:899267e6-1657-33a8-7cc7-00798d516893</id>
<updated>2018-04-06T05:22:27+00:00</updated>
<summary type="html"><![CDATA[<p>注意 - 皮肉的な記事です. いくつか使っていて, 辛いところを記述するので, ネタみたいな記事です.</p>
<h2>配列周り</h2>
<p>PHPには, 配列がありまして, <code>$foo = [1, 2, 3]</code>とかです. 前までは<code>$foo = array(1, 2, 3)</code>でした.<br />
そんな配列なのですが, JavaScriptとかRubyとかと違って, arrayであって, array objectではないわけです. そんなわけで, 配列の操作がしたければ, <code>array_*()</code>を使うわけです. <code>array_push()</code>に関しては, <code>$array[] = $val</code>でできます.<br />
そんなPHPの配列で面白いところは, <code>array_map()</code>です. <code>array_push($array, $val_1)</code>, <code>array_filter($array, $callback)</code>, <code>array_reduce($array, $callback)</code>など, 第1引数に配列を持ちます. しかし, <code>array_map()</code>は<code>array_map($callback, $array)</code>と順番が逆なのです. これが辛い. 統一していて欲しい.<br />
PHPの配列が辛い人は, <code>Illuminate\Support\Collection</code>を使ってオブジェクトにすればいいと思うので, <code>composer install illuminate/support</code>しましょう.</p>
<h2>オブジェクトのコピー</h2>
<p>PHPのオブジェクトを別の変数に渡す時, <code>clone</code>を利用します.</p>
<pre><code>&lt;?php
class Sample {
    public $count = 0;
}

$foo = new Sample();
$bar = clone $foo;

$bar-&gt;count++;

var_dump($foo-&gt;count); // int(0)
var_dump($bar-&gt;count); // int(1)
</code></pre>
<p>もしも<code>clone</code>を使用しないと, 思わぬ副作用を生み出します.</p>
<pre><code class="language-php">&lt;?php
class Sample {
    public $count = 0;
}

$foo = new Sample();
$bar = $foo;

$bar-&gt;count++;

var_dump($foo-&gt;count); // int(1)
var_dump($bar-&gt;count); // int(1)
</code></pre>
<p><code>$foo-&gt;count</code>も書き換わってしまうんですね. そんな<code>clone</code>ですが, クローンが作成される際に呼ばれるマジックメソッド<code>__clone()</code>というものがあります. これは作成された新たなオブジェクトで呼ばれます.</p>
<pre><code class="language-php">&lt;?php
class Sample {
    public $count = 0;

    public function __clone() {
        $this-&gt;count++;
    }
}

$foo = new Sample();
$bar = clone $foo;

var_dump($foo-&gt;count); // int(0)
var_dump($bar-&gt;count); // int(1)
</code></pre>
<p>これにより, 遺伝子操作されたクローンを作ることができます. 使う機会があるかはわかりませんが.</p>
<h2>ついでに</h2>
<p>homebrewでのPHPのインストール方法が変わりました. いままでは<code>brew install php72</code>だったのですが, これからは, <code>brew install php@7.2</code>という形になります. あと, xdebugがインストールされていないようなので, 調べたらpeclを使ってとあったので, <code>pecl install xdebug</code>をしましょう. 詳しくは GitHubのIssueで <a href="https://github.com/Homebrew/homebrew-php/issues/4721">https://github.com/Homebrew/homebrew-php/issues/4721</a></p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>Clipasってサイトを作りました</title>
<link href="https://taniko.github.io/article/2018/03/280656"></link>
<id>urn:uuid:447316c4-1551-ad2f-aa8c-e481fb651fd4</id>
<updated>2018-03-28T06:56:32+00:00</updated>
<summary type="html"><![CDATA[<p>ただ単に, SNSのアカウントなどのURLをまとめるサービスである<a href="https://clipas.me">Clipas</a>を作りました.</p>
<h2>clipasについて</h2>
<p>どんなサービスかは見てもらう方が早いと思うので私のページのURLを載せておきます.</p>
<p><a href="https://clipas.me/taniko">https://clipas.me/taniko</a></p>
<p>自分に関するURLまとめておくだけのサービスなので, SNS, ホームページ等のURLを載せて, このサービスのURLを他のサービスのURL欄に載せておくだけです. 自分のプロフィールへのリンク, アカウント情報を1箇所にまとめられるので便利.</p>
<h2>作った理由</h2>
<p>Twitter, GitHub, Instagramなどでプロファイル欄にURLを載せられる場所ありますよね？ そこにが何のURLを載せていますか？ どのURLを載せるか悩んでいませんか？<br />
私は TwitterのはGitHubのリンク. GitHub にはホームページのリンクを載せていました. 他にもFlickrやInstagramなどでも様々でした. 1箇所で自分のアカウント一覧を表示してくれるサービスを作りました.</p>
<h2>今後</h2>
<p>clipasに説明欄が足りないなと思ったので, あとで加えようと思います. また, 公式(？)サービス一覧追加のリクエストフォームがあればいいなと. あと, できればユーザアイコンも.</p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>Laravelのクエリビルダでifとかを使う</title>
<link href="https://taniko.github.io/article/2018/03/140815"></link>
<id>urn:uuid:d8ac6ad6-421d-8b27-cbab-382cdeacf0ce</id>
<updated>2018-03-13T23:15:25+00:00</updated>
<summary type="html"><![CDATA[<h2>はじめに</h2>
<p>Laravelで特定のクエリパラメータを使ってクエリを組み立てたいときってありませんか? 例えば, 検索なので, <code>since_id</code>があれば, セットされている値以降で絞り込んで検索とかです.</p>
<pre><code class="language-php">&lt;?php
namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Asset;
use App\Http\Requests\Asset\SearchRequest;

class AssetController extends Controller
{
    public function search(SearchRequest $request)
    {
        $query = Asset::query();
        if ($request-&gt;has('since_id')) {
            $query = $query-&gt;where('id', '&gt;=', $request-&gt;input('since_id'));
        }
        if ($request-&gt;has('until_id')) {
            $query = $query-&gt;where('id', '&lt;=', $request-&gt;input('until_id'));
        }
        return $query-&gt;get();
    }
}
</code></pre>
<p>こんな感じで書けますよね.<br />
ただ, これだと何個もif文を書いていくことになります. メソッドチェーンでやってみたくなったので, やってみましょう.</p>
<h2>やり方</h2>
<h3>マクロの登録</h3>
<p>まず, クエリビルダで<code>if</code>と<code>whereIf</code>を使えるように登録します. <code>app/Providers/AppServiceProvider.php</code>に以下のコードを加えます.</p>
<pre><code class="language-php">&lt;?php
// app/Providers/AppServiceProvider.php
namespace App\Providers;

use Illuminate\Support\ServiceProvider;
use Illuminate\Database\Query\Builder;
use Illuminate\Support\Facades\Schema;

class AppServiceProvider extends ServiceProvider
{
    public function boot()
    {
        Builder::macro('if', function (bool $condition, callable $func) {
            return $condition ? $func($this) : $this;
        });
        Builder::macro('whereIf', function (bool $condition, $column, $operator = null, $value = null, $boolean = 'and') {
            return $condition ? $this-&gt;where($column, $operator, $value, $boolean) : $this;
        });
    }
}
</code></pre>
<p>まず1つ目は, コールバック関数を与える方法です. これは, 複雑なクエリを付け加えたい時に使用します. 単純な<code>where</code>句を加えたいだけなら, この方法はおすすめしません.<br />
2つ目は<code>where</code>句のみを付属させるものです. <code>where()</code>とほぼ同じ使い方なので, こちらがおすすめです. <code>where()</code>との違いは, 第1引数が<code>true</code>ならば<code>where</code>が加えられるという点です.</p>
<h3>使い方</h3>
<p>ユーザの投稿一覧の取得のサンプルコードです.</p>
<pre><code class="language-php">&lt;?php
// 1つ目 if
$posts = $user-&gt;posts()
    -&gt;if($request-&gt;has('since_id'), function ($query) use ($request) {
        return $query-&gt;where('id', '&gt;=', $request-&gt;input('since_id'));
    })-&gt;get();

// 2つ目 whereIf
$posts = $user-&gt;posts()
    -&gt;whereIf($request-&gt;has('since_id'), 'id', '&gt;=', $request-&gt;input('since_id'));
</code></pre>
<p>こんな感じでメソッドチェーンをつなげていくことができます.<br />
どちらの方が見やすいのか. ブロックで分けるべきか, 1行でまとめるべきか. あと, 型宣言や関数呼び出しの速度も.</p>
<h2>リンク</h2>
<p><a href="https://laravel.com/api/5.5/Illuminate/Database/Eloquent/Builder.html#method_where">Laravel API - https://laravel.com/api/5.5/Illuminate/Database/Eloquent/Builder.html#method_where</a></p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>マルチバイト周りに対応したローマ数字のパーサを作った</title>
<link href="https://taniko.github.io/article/2017/12/071509"></link>
<id>urn:uuid:1b76f5b3-5ad5-d33b-5149-c4d573065e3a</id>
<updated>2017-12-07T06:09:46+00:00</updated>
<summary type="html"><![CDATA[<p>日本語とは厄介なのでしょうか? とても扱いやすい言語だとは思います. 特に数字周りに関しては素晴らしい思っています. 英語の数え方とか加減乗除とかは厄介だと思います.<br />
では, 日本の厄介な部分はどこかというと, マルチバイト文字だということ. 文字数が多すぎる.<br />
ということで, 今回はローマ数字周りのライブラリです.</p>
<p>まずは, マルチバイト周りのローマ数字について. 10を例に話します.</p>
<table>
<thead>
<tr><th align="center"></th><th align="left"><code>x</code></th><th align="left"><code>X</code></th><th align="left"><code>ｘ</code></th><th align="left"><code>Ｘ</code></th><th align="left"><code>ⅹ</code></th><th align="left"><code>Ⅹ</code></th></tr>
</thead>
<tbody>
<tr><td align="center">説明</td><td align="left">半角小文字</td><td align="left">半角大文字</td><td align="left">全角小文字</td><td align="left">全角大文字</td><td align="left">ローマ数字(小文字)</td><td align="left">ローマ数字(大文字)</td></tr>
<tr><td align="center">Unicode</td><td align="left">120</td><td align="left">88</td><td align="left">65368</td><td align="left">65336</td><td align="left">8569</td><td align="left">8553</td></tr>
</tbody>
</table>
<p>11を表すには? <code>xi</code>? <code>XI</code>? <code>ｘｉ</code>? <code>ＸＩ</code>? <code>ⅺ</code>? <code>Ⅺ</code>?</p>
<p>辛い.</p>
<p>そんなわけで<code>taniko/romans</code>を作りました.
インストールは<code>composer require taniko/romans</code>でできます.</p>
<pre><code class="language-php">&lt;?php
require 'vendor/autoload.php';

// 全角大文字
var_dump(Taniko\Romans\Parser::toInt('MMＸVII'));
// int(2017)

// ローマ数字(大文字)
var_dump(Taniko\Romans\Parser::toInt('MMⅩVII'));
// int(2017)
</code></pre>
<p>ちなみに, PHP 7.2からは<code>mb_ord()</code>, <code>mb_chr()</code>が使えるようになりました. <code>symfony/polyfill-mbstring</code>を使わなくてもいいようになりました.  </p>
<p>最後に, PHPは最高ですね.</p>
<p><font color='gray'>既存のライブラリにマルチバイト周りをASCIIに変換する部分だけのPRでも作る?</font></p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>pixiv 2017 SUMMER BOOT CAMPに参加してきました</title>
<link href="https://taniko.github.io/article/2017/09/211755"></link>
<id>urn:uuid:459a5104-dd21-26bf-8d17-138b34de443c</id>
<updated>2017-09-21T08:55:51+00:00</updated>
<summary type="html"><![CDATA[<p><img src="/article/2017/09/211755/front.jpg" alt="" />
ピクシブさんのインターンに行ってきたのでそのお話です. <a href="https://taniko.github.io/article/2016/09/summer_boot_camp_2016/">去年も参加</a>したので, 1年ぶり2度めのピクシブさんでのインターンでした.</p>
<h2>参加するまで</h2>
<h3>選考について</h3>
<p>GitHub選考が今年もあったので, それを使って応募しました. GitHub選考は, 履歴書とか書かなくていいのでおすすめです.  </p>
<p>1次選考が終わったらオンライン面接がありました. 内容は, なぜ(今年も)応募したのかや, 参加希望コースのこととか, コーディングテストとかです. コーディングテストに関しては, 好きな言語でやっていいとのことなので, もちろんPHPでやりました.  </p>
<p>エントリーから面接含めて2週間弱で, 参加させていただけることが決まりました.</p>
<h3>前日</h3>
<p>去年同様に, 初日の朝に滋賀から東京に行って, 最終日の夜に帰ろうとしていたのですが, 東京に住んでいる友達にお願いして, 泊めてもらえることになりました. おかげさまで移動がだいぶ楽になりました. 感謝です.</p>
<h2>やったこと</h2>
<p>初日の午前中は, インターンの概要説明, 自己紹介, 機密保持契約とかをやっていました. 社員の方はもちろんなのですが, 参加しているインターンの人もすごい人ばっかりでした.</p>
<p>午後からは, 開発環境の構築から始まり, 実際に開発を行い始めました. 開発環境の構築なのですが, データが大きすぎるので, 開発用のサーバのコードを触って行うというものだったので, SSHとかの知識がほんの少し必要. セットアップの方法はまとめられているので, 基本的にはその通りにやっていけば行えました. SSHの公開鍵周りのことがあるので, GitHubに公開鍵を登録しておくと楽です.</p>
<p>開発なのですが, 今回, 私が参加したのは技術基盤コースというもので, pixivや他のサービスで利用されているライブラリやルーティングをリファクタリングなどが主な内容でした.</p>
<p>具体的には</p>
<ul>
<li>PDOから独自のライブラリに移行</li>
<li>リファレンス渡しをなくす</li>
<li>ユーザが原因のエラーのログレベルを修正</li>
<li>とあるエラー時のログ用テーブルの設計とロギング用クラス作成</li>
</ul>
<p>など. テストがないようなところはテストも作ったりしていました. 基本的にはPHPを触っていたのですが, エラーの再現をさせるためにフロント(TypeScript)のコードも読むことがありました.</p>
<p>GitHubにインターン生用のスナップショットがおいてあって, そこで開発していきました.  </p>
<p>流れとしては,</p>
<ul>
<li>コードを書く</li>
<li>PRを送る</li>
<li>コードレビューを受ける</li>
<li>本体(実際に運用されているリポジトリ)にマージされる</li>
<li>デプロイ</li>
</ul>
<p>といった感じです. 時々, 本体側で更新されたコードもまとめて降ってきました.<br />
チーム開発なので, リーベースしたり, コミットをまとめたりなどをすることがありました. 一度, PRをクローズ, スカッシュ, リベースなどをやってしまって, PRを再オープンするのに手間取って大変でした.<br />
インターン中にいくつかのPRがマージされました. 実際に本体でマージされてデプロイされる画面も見せていただきました.</p>
<p>最終日は, インターンの成果発表がありました. インターンはコース毎に分かれてやっていたので, 他のコースの人がどんなことをやっているのかは, その時まではよくわかっていなかったのですが, 皆さん機能追加やOSSへコントリビュートしたり楽しそうでした.<br />
あと, すべてが終わったあとにオフィス見学をさせていただきました.</p>
<h2>さいごに</h2>
<p>開発業務以外にも, 全社ミーティング, インターン生向けの講義とかがあり, ピクシブさんの現状であったり, プロジェクトのこれからの方針とかも聞かせて頂きました.  </p>
<p>一緒に働かせていただいて, 周りの方々はすごい人ばかりだなと感じました. メンターの方々に相談すれば一緒に考えてくださり, とても親切な方々でした.</p>
<p>大変勉強になった5日間でした. ピクシブさんには大変お世話になりました. このような機会をいただき, ありがとうございました.</p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>Saori v3のリリース</title>
<link href="https://taniko.github.io/article/2017/09/030049"></link>
<id>urn:uuid:851adc68-9980-f15c-afd3-bfeefe6df551</id>
<updated>2017-09-02T15:49:14+00:00</updated>
<summary type="html"><![CDATA[<p>Saoriのバージョン3をリリースしました. 実際にリリースしたのは5月とかなり前です.<br />
v3での主な変更点は以下のとおりです.</p>
<ul>
<li>github.io以外で使用可能</li>
<li>設定ファイルをJSONからYAMLに変更</li>
<li>テーマを外部から追加可能</li>
</ul>
<p>まず, github.io以外で使用可能になったので, 自分のVPSなどでブログを公開できるようになりました. <code>config/env.yml</code>の<code>public</code>にURLを記述します.  </p>
<p>設定ファイルをYAMLに変えたのは, JSONの記述が辛かったからです. 括弧とかめんどくさかったのです.</p>
<p>テーマを外部から追加可能というのは, テーマを追加できるようにしたということ(?). コードを見たほうが早い.</p>
<pre><code class="language-php">&lt;?php
require __DIR__.'/vendor/autoload.php';
$app = new Taniko\Saori\Application(__DIR__);
$app-&gt;addTheme('theme-name', __DIR__ . '/theme/append-theme');
$app-&gt;run();
</code></pre>
<p>今までだと<a href="https://github.com/taniko/saori">taniko/saori</a>に存在するテーマしか使用できなかったのですが, このような感じでテーマを追加して, それを使用できるようにしました.</p>
<p>やっぱり, PHPは最高ですね!</p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>2016年のまとめ</title>
<link href="https://taniko.github.io/article/2016/12/311932"></link>
<id>urn:uuid:2074e7e0-9b5a-3730-dc21-99c56d5dd2d1</id>
<updated>2016-12-31T10:32:38+00:00</updated>
<summary type="html"><![CDATA[<p>もう年末です. 今までダラダラと過ごしていた私ですが, 今年は珍しく活動したのでそのまとめです.</p>
<h2>大学のオープンキャンパス手伝い</h2>
<p>4月頃, 3回生のときに授業の一環で作成した簡単な情報推薦のサイトをオープンキャンパスで紹介する事になりました. 簡単にコードを修正して終わりのつもりだったのですが, ｢前のままだと地味なので推薦できるものを書籍だけでなくて浮世絵も追加してね｣と先生に言われて新たにコードを書くことになりました.</p>
<h2>PHPカンファレンス関西</h2>
<p>2016年12月31日現在, GitHub Pagesを利用してブログをやっています. これですね. 4月ごろから, このようなブログを生成する静的サイトジェネレータ Saoriを作成していました. PHPカンファレンスに行ったことがなかったのですが, LTを応募したら通ったのでSaoriについて話してきました. 初めてのイベントです.<br />
詳しくは<a href="https://hrgruri.github.io/article/2016/07/phpcon_kansai_2016/">PHPカンファレンス 関西2016でLT</a>に書いてあるのでそちらを.</p>
<h2>インターン</h2>
<p>8月末~9月末にピクシブのインターンに参加してきました. これも初めてのインターンです. pixivのメンテナンスを行いました. バグ修正とかコードのリファクタリングとかです.
詳しくは<a href="https://hrgruri.github.io/article/2016/09/summer-boot-camp-2016/">pixiv 2016 SUMMER BOOT CAMPに参加</a>に書いてあるのでそちらを.</p>
<hr />
<p>こんな感じで初めての行動が多い1年でした. 3つともPHP関連ですね. PHPは楽しいです. みんなもPHPをやろう!<br />
ついでに個人的な話以外を. 今年は百合姫が月刊誌になりましたね. あと早見沙織さんが1stアルバム｢Live Love Laugh｣と, コンサートの映像･音声が特典でついたミニアルバム｢live for LIVE｣をリリースしましたね. とってもいいものですので, みなさんもどうぞ.</p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>Saori v2.2のリリース</title>
<link href="https://taniko.github.io/article/2016/11/251311"></link>
<id>urn:uuid:67b62569-a892-8164-9011-97a1e4beb135</id>
<updated>2016-11-25T04:11:48+00:00</updated>
<summary type="html"><![CDATA[<p>v2.2では主にコマンドの追加をしました.</p>
<h2>コマンドの追加</h2>
<h3>deploy</h3>
<p><code>deploy</code>はデプロイを簡単にするためのものです. git add, commit, pushをまとめてやってくれるといった簡単なものです.</p>
<pre><code class="language-sh">php saori deploy (:commit_message)
</code></pre>
<p>これで動作します. <code>:commit_message</code>が存在しなければ<code>date('YmdHi')</code>が入ります.</p>
<h3>theme</h3>
<p><code>theme</code>は存在するテーマ一覧の取得と, テーマの設定ファイルの確認に使います</p>
<pre><code class="language-sh">php saori theme
## 以下が表示される
Theme list
sample, saori

php saori theme saori
## 以下が表示される
saori/theme.json
{
    "noapp":5,
    "color" : {
        "header" : "#000033",
        "title" : "#EEEEEE",
        "body"      : "#E9E9E9",
        "article"   : "#FFF1CF",
        "main" : "white",
        "side" : "white"
    },
    "date-format" : "Y-m-d"
}
</code></pre>
<h2>内部的な話</h2>
<p>現在置換え中ですが, PHPの配列から<code>Illuminate\Support\Collection</code>に変更中です. Laravelで使われているあれです. まだ書き換えられていないところもあるのですが, 徐々に書き換えていきたいと思います.<br />
あと, テーマ作成の面で言うと<code>css.twig</code>を使えるようにした. これはcss/name.css.twigをcss/name.cssに書き換えると言うもの. theme/saoriではheader, bodyなどの背景色をカスタマイズできるようにするために使用しています.</p>
<pre><code class="language-css.twig">/* theme/saori/css/article.css.twig */
article {
    background: {{maker.color('article')}};
    margin-bottom: 50px;
    padding: 5px 10px 5px 10px;
}
</code></pre>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>Slackのフレームワーク(?)を作った</title>
<link href="https://taniko.github.io/article/2016/10/ricca"></link>
<id>urn:uuid:b5440d86-7e78-04ea-725d-5bf998fe61e7</id>
<updated>2016-10-22T14:11:22+00:00</updated>
<summary type="html"><![CDATA[<p><a href="https://github.com/hrgruri/ricca">Ricca</a>というSlackのフレームワークのようなものをPHPで作りました. できることは少ないですが, なにかメッセージを投げるとそれに一致したコマンドが動いて, Twitterにつぶやかれたり, Slackに文字を返したりするという単純なものです.<br />
例としては｢tw こんにちは｣とメッセージを送るとTwitterに｢こんにちは｣とつぶやかれるとか｢pid｣でBotの動いているプロセスIDがslackに返ってくとかです.</p>
<h2>コマンドについて</h2>
<h3>コマンドの作り方</h3>
<p>実際にコードをみてもらうとわかりやすいと思うので<a href="https://github.com/hrgruri/ricca/blob/master/src/Command/Tweet.php">twコマンドのコード</a>を載せます. configure()で設定をしてexecute()に実際の処理を書くといったものです.</p>
<pre><code class="language-php">&lt;?php
namespace Hrgruri\Ricca\Command;
class Tweet extends \Hrgruri\Ricca\Command
{
    public function configure()
    {
        $this-&gt;setName('tw')
            -&gt;setChannel('general');
    }
    public function execute(\Hrgruri\Ricca\Request $req, \Hrgruri\Ricca\Response $res)
    {
        return $res-&gt;withTweet($req-&gt;getText())-&gt;withText('tweeted');
    }
}
</code></pre>
<h3>botにコマンドを追加する方法</h3>
<p>上記のようなコードを書くだけで簡単にコマンドを作成することができます. 自分で新たにコマンドを作成したら使用できるようにコマンドを追加します. 下のコードはbotを動かすためのコードです. add()で作ったコマンドを登録していけばいいだけです.</p>
<pre><code class="language-php">&lt;?php
require 'vendor/autoload.php';
$app = new Hrgruri\Ricca\Application(__DIR__.'/data', 'general');
$app-&gt;add(new Hrgruri\Ricca\Command\Tweet);
$app-&gt;run();
</code></pre>
<hr />
<p>私のbotのリポジトリ <a href="https://github.com/hrgruri/slack_bot">hrgruri/slack_bot</a></p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>saoriのv2.1リリース</title>
<link href="https://taniko.github.io/article/2016/09/saori_v2_1"></link>
<id>urn:uuid:489d64f6-a1ec-80b4-f1c2-d3668fdbcf7f</id>
<updated>2016-09-22T09:01:37+00:00</updated>
<summary type="html"><![CDATA[<p>saori v2.1.0をリリースしました. v2.0の話をしていなかったのでここでまとめて話します.</p>
<h2>create-projectからインストール</h2>
<p><code>composer create-project hrgruri/saori-skeleton blog</code>でインストールができるようになりました. これにより</p>
<pre><code class="language-sh">mkdir blog
cd blog
composer require hrgruri
</code></pre>
<p>とかしなくてもよくなった. そもそもインストールなので何度もするようなものじゃないですけどね.</p>
<h2>使い方の変更</h2>
<p>symfony/consoleを使用するように変更しました.</p>
<pre><code class="language-sh">php saori init
php saori draft article_name
php saori post article_name
php saori build
php -S localhost:8000 -t local
</code></pre>
<p>このような使い方です. saoriはインストール時に存在していますので, 自分で実行のためのコードを書く必要はないです.</p>
<h2>pageコマンドの追加</h2>
<p>利用者が記事以外のページを作成したいときに使うコマンドです.
<code>php saori page about</code>とすると<code>contents/page/about.md</code>が作られます. ここに色々と書いてビルドすると<code>/about/index.html</code>が生成されます.</p>
<h2>httpsのリダイレクト</h2>
<p>saori(デフォルトのテーマ)ではhttpでアクセスされた際に, httpsへとリダイレクトするように変更しました.</p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>pixiv 2016 SUMMER BOOT CAMPに参加</title>
<link href="https://taniko.github.io/article/2016/09/summer_boot_camp_2016"></link>
<id>urn:uuid:ee3f57c9-75fd-5da3-c87b-c868fd2dc063</id>
<updated>2016-09-09T06:29:37+00:00</updated>
<summary type="html"><![CDATA[<h1>ピクシブのインターンに参加</h1>
<p><a href="https://ssl.pixiv.net/recruit/entry/summer_intern16.php">pixiv 2016 SUMMER BOOT CAMP</a>にエンジニア職で参加をしたのでその話です.</p>
<h2>参加するまで</h2>
<p>GitHub選考のあるインターンを探していたところ, ピクシブさんのインターンを見つけました. 普段からPHPを使っており, pixivはPHPで作られているので,これは応募するしかないと思い応募しました.<br />
書類選考と,面接(Skype)がありましたが無事にパスして参加することになりました.</p>
<h2>インターンの形式</h2>
<p>今回のインターンは学生たちが集まってハッカソンをするとかではなく, 実際のチームに配属され, そこで仕事をするというもの. (全体)会議にも参加します. チームによってはユーザの入会率や開封率などの数字で振り返ったりもします. 私はpixivメンテナンスチームに配属となり, バグ修正やコードのリファクタリングを行ったので, ユーザ数などで振り返るとかってのはなかったです. 私の場合, テストの作成だったり, 新しいクラスの設計とかもやりました.</p>
<h3>主な流れ(メンテナンスチーム)</h3>
<ol>
<li>コードの改修</li>
<li>プルリクエストの作成</li>
<li>コードレビュー</li>
<li>コードの修正</li>
<li>本体にマージしてもらえる</li>
</ol>
<h2>業務とか</h2>
<p>修正･改修した箇所はいくつかあるのですが, その中から1つ話したいと思います.</p>
<h3>画像投稿時のバグ</h3>
<p>修正したバグの1つは, とあるフォームで巨大な画像をアップロードするとPHPのエラーが出てしまうというものでした.  (本番環境では再現させてないのですが, もしかしたら白い画面?)<br />
まずはじめに画像のバリデーション失敗時にエラー画面を出すようにしたら, 該当箇所は修正できました. しかしながら, 別のところがおかしくなってしまいました. どうやら修正の仕方を間違えていた. なので他の正常なフォームと比べながらコードを辿っていき, エラーの原因となっている箇所を探しました.<br />
無事に該当箇所を見つけて修正できたのですが, 該当箇所を探しているうちに別のバグ(?)もあったのでそれも報告して修正をしました.  </p>
<h3>その他</h3>
<p>コードを書く以外にも朝会, 夕会, 全体会議とかがありました. 全体会議はいろいろな数字や戦略の話が出たりと, 本当にインターン生も参加していいのかってものでした.</p>
<h2>参加してみて</h2>
<p>初めてのインターンということで, 自分がどこまで出来るのかなど不安だらけでしたが5日間楽しむことができました. 他とは比較できないのですが, ものすごくいいインターンでした. オフィスは会議室以外に壁がなく, ニックネームで呼び合うというコミュニケーションが溢れているところでした.<br />
開発している時に感じたのは, PHPDocの大切さです. 今までは個人でコードを書くことばかりだったので, ドキュメントを残さないことが多々ありましたが, 大規模で多くの人が書いたコードを触るにあたって, ドキュメントの大切が分かりました.  他にもメンターさんから, 書かれているコードに敬意を持つこととメンテナンスの重要さを教わりました.<br />
メンターさんたちと話す機会も多く, 会社やサービスの現状や大規模なサービスならではの悩みなど聞くことができた. 大変貴重な体験ができたインターンでした.</p>
<h2>終わりに</h2>
<p>5日間と短い期間でしたが, 学ぶことの多い5日間でした.  5日間ありがとうございました. 参加できるようなら, また参加したいです.</p>
<hr />
<p>Twitter  <a href="https://twitter.com/search?src=typd&amp;q=%23pixiv_BOOTCAMP">#pixiv_BOOTCAMP</a></p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>学年暦APIを作った</title>
<link href="https://taniko.github.io/article/2016/08/ritsucal_api"></link>
<id>urn:uuid:ff54d09a-fdbb-3a75-7de8-130c6d0df2a6</id>
<updated>2016-08-26T13:41:38+00:00</updated>
<summary type="html"><![CDATA[<p>簡単な大学の学年暦APIを作ったのでその報告です.</p>
<p><a href="https://ritsucal.hrgruri.com">https://ritsucal.hrgruri.com</a> です</p>
<p>大学と大学院(情報理工学研究科)の学年暦をJSONで取得できるという簡単なものです. 使い方は<a href="https://ritsucal.hrgruri.com/doc">ドキュメント</a>を見てもらえればいいかと.<br />
検索機能ですが,そのうちsince, untilができるようにはしたいと思います</p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>saori v2.0を開発中</title>
<link href="https://taniko.github.io/article/2016/08/041630"></link>
<id>urn:uuid:56a26964-1f88-f2ce-4e60-53a52d09e01e</id>
<updated>2016-08-04T07:27:14+00:00</updated>
<summary type="html"><![CDATA[<p><code>composer create-project</code>でインストールできるようにして, symfony/consoleを利用してsaoriを使用できるようにしました. あとnamespaceを修正.</p>
<h2>v2.0-devをインストール</h2>
<p><code>composer create-project hrgruri/saori:v2.0.x-dev blog</code>で開発途中のv2.0をインストールして始めることができます. 最後の<code>blog</code>はディレクトリ名なので別のものに変えても構いません.  </p>
<h2>使用方法</h2>
<pre><code class="language-sh">composer create-project hrgruri/saori:v2.0.x-dev blog
cd blog
php saori

#初期化
php saori init

#下書きファイルを生成 (いきなりpostを使ってもいい)
php saori draft first_article

#記事の投稿
php saori post first_article

#静的サイトを生成
php saori build
</code></pre>
<p>現在のところ,init, draft, post, buildが使用できます. <code>-h</code>使えば簡単な説明が出ると思うのでそちらを参考に.</p>
<p><code>php saori draft</code>は別に使用しないでいきなり<code>php saori post</code>しても利用できるのですが, <code>draft</code>を使ったほうがいいかと.</p>
<h2>今後</h2>
<p><code>draft</code>した時にはconfig.jsonが作られず, <code>post</code>した時に作られるのですが, これだと<code>post</code>した後じゃないとconfig.jsonがさわれない. config.jsonを<code>draft</code>でも生成しておき, timestampを<code>post</code>した時に追加させようと思います.  </p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>弊大学の闇 (学年暦編)</title>
<link href="https://taniko.github.io/article/2016/07/calender"></link>
<id>urn:uuid:33d94f93-6642-c73b-99d8-cc188bf7dec0</id>
<updated>2016-07-20T07:31:04+00:00</updated>
<summary type="html"><![CDATA[<h1>学年暦の闇</h1>
<p>大学の行事をJSONで返してくれるようなものを作ろうとしていた時に気づいた弊大学の闇を話したいと思います.</p>
<h2>calender ?</h2>
<p>PHPを使って学年暦をスクレイピングする<a href="https://github.com/hrgruri/ritsucal">ライブラリ</a>に行事の検索機能を追加しようとしていました. 検索機能と言っても年･月･日を連想配列で渡すと該当の行事が配列で帰ってくる簡単なものです.<br />
引数の型が指定できるので<code>\Hrgruri\Ritsucal\Calendar</code>型と<code>array</code>型を引数にしてメソッドを作りました. 学部の学年暦と今日の日付でテストをするとTypeError. 型が違うというエラー. 該当するクラスを見に行くとあるのは<code>src/Calender.php</code>.
<font color=red>Calender.php </font>?<br />
CalendarではなくCalender. ちなみにCalenderは光沢機のこと.</p>
<p>タイプミス? やってしまったと思い, 置換しようと｢calender｣で検索すると</p>
<pre><code class="language-php">private $url = 'http://www.ritsumei.ac.jp/profile/info/calender/';
</code></pre>
<p>までヒットした.</p>
<h2>大学の間違え</h2>
<p>ブラウザで確認したところ<br />
<a href="http://www.ritsumei.ac.jp/profile/info/calender/">http://www.ritsumei.ac.jp/profile/info/calender/</a> は存在しているが,<br />
<a href="http://www.ritsumei.ac.jp/profile/info/calendar/">http://www.ritsumei.ac.jp/profile/info/calendar/</a> は存在していない.  </p>
<p>大学側も間違えていた. 学年暦のページが光沢機(calender)になっている.</p>
<h2>今回の原因</h2>
<p><del>そもそも大学側が間違えていたので, 私が間違えたのは大学のせいである. むしろ間違いに合わせているので,私は間違えていない</del></p>
<ol>
<li>単語の綴り確認もせずに,学年暦のURLに合わせてクラス名を決めてしまっていた.</li>
<li>大学のホームページは正しいと思いんでいた.</li>
<li>補完に頼り過ぎた.</li>
</ol>
<h2>まとめ</h2>
<p>英語の綴りは確かめましょう. Googleで｢学年暦｣と検索して1番上に来るような弊大学のホームページだからといって間違いがないとは思ってはいけない.<br />
そして<font color=red>弊大学の学年暦は光沢機</font></p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>Saoriの下書きとキャッシュ</title>
<link href="https://taniko.github.io/article/2016/07/saori_article_cache"></link>
<id>urn:uuid:baf866b4-1c67-b3b3-182b-fd8dde619b5b</id>
<updated>2016-07-19T05:14:19+00:00</updated>
<summary type="html"><![CDATA[<h1>saori v1.1の開発</h1>
<p>現在saori v1.1の開発を行っています.  </p>
<ul>
<li>下書き機能</li>
<li>記事のキャッシュ</li>
</ul>
<p>に関することを行いました.  </p>
<h2>下書き機能</h2>
<p>下書き機能は<code>php main.php draft :name</code>とするとcontents/draft/:name/article.mdが作成されてここで記事の下書きができるよになるものです. 投稿したい場合は<code>php main.php post :name</code>とするとcontents/article/yyyy/mm/:nameにコピーされます. 記事のconfigファイルは<code>post</code>した時に作成されます.</p>
<h2>記事のキャッシュ</h2>
<p>今まではarticle.mdの画像パスを書き換えたものをcache/に作成しておき, <code>article.html()</code>でarticle.mdを読み込んでパースをしていました.<br />
これを予めパースしておきarticle.htmlをcache/に作成しておき, <code>article.html()</code>でarticle.htmlを読み込むというものに変更しました.</p>
<h3>時間計測</h3>
<p>500回ループさせて時間を計測しました. 変更前後で2回計測.</p>
<table>
<thead>
<tr><th></th><th>変更前</th><th>変更後</th></tr>
</thead>
<tbody>
<tr><td>1回目</td><td>60.15</td><td>53.39</td></tr>
<tr><td>2回目</td><td>59.77</td><td>54.78</td></tr>
<tr><td>平均</td><td>59.96</td><td>54.085</td></tr>
</tbody>
</table>
<p>記事の数やブログのテンプレートによって前後するとは思いますが, 方式を変えたことで5.875秒削減できました. 現在のところブログを生成する際には誤差かもしれませんが, 記事数が増えれば差が大きくなっていくかもしれません.</p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>PHPカンファレンス 関西2016でLT</title>
<link href="https://taniko.github.io/article/2016/07/phpcon_kansai_2016"></link>
<id>urn:uuid:cebc8a79-9827-c9dc-132e-f9d367285c38</id>
<updated>2016-07-17T14:23:30+00:00</updated>
<summary type="html"><![CDATA[<p>PHPカンファレンス関西 2016に参加をして, ブログを書くまでがカンファレンスだと言われたので書きたいと思います. 初めてのIT系イベント, 初めてのLT, 初めての懇親会でした. 先に断っておきますがカンファレンスでの基調講演やセッションの感想ではなく個人的な話が主です.</p>
<h1>当日まで</h1>
<h2>カンファレンスに参加</h2>
<p>そもそもPHPカンファレンス関西というのを知ったのが, 2015年のカンファレンスの動画をYouTubeで見つけた時です. なので知ってから1年も経っていません.<br />
東京は行くのが厳しいですが, 大阪なら行けるということで2016年のPHPカンファレンス関西には参加したいと思いました.
<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">PHPについて勉強しなきゃ。カンファレンス・関西を見に行ってみたい</p>&mdash; 柊木 (@hrgruri) <a href="https://twitter.com/hrgruri/status/675512116514701312">2015年12月12日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
その時点ではまだ何月何日に開催されるのかわかりませんでした.
月日は流れ, 開催日が発表されてそれを確かめると7月16日. 予定も空いているので参加を決意しました. この時点ではただ単にカンファレンスを聞きに行くだけの予定でした.<br />
一応,少しずつですが<a href="https://github.com/hrgruri/saori">hrgruri/saori</a>の開発をしていました.  </p>
<h2>LT参加を決意</h2>
<p>6月になってもまだLTの応募がありました. セッション枠は募集終了していたと思います.
<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">カンファレンスのLT募集のフォームがまだあるってことは、LT募集しているのかな？</p>&mdash; 柊木 (@hrgruri) <a href="https://twitter.com/hrgruri/status/740189166785306624">2016年6月7日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
カンファレンスに参加をするんだったら話したいなと思い, 思い切ってLTの応募をしました. 落選するだろうなと思っていたのですが, 6月16日に当選メールが来て喜ぶと同時に(まだまだ先ですが)緊張しました.    </p>
<h2>前日</h2>
<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">デモをやったら5分で収まるかな? 怪しい</p>&mdash; 柊木 (@hrgruri) <a href="https://twitter.com/hrgruri/status/753777772007264256">2016年7月15日</a></blockquote>
<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">CDN使っているのでオフラインだとデザインがかなり壊れるので、デモ用にダウンロードしてパスを書き換えた状態のものを用意しておく</p>&mdash; 柊木 (@hrgruri) <a href="https://twitter.com/hrgruri/status/753920059337281536">2016年7月15日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<h1>当日</h1>
<h2>午前の部</h2>
<p>開場が10時からで,大阪駅には9時30分ごろに着いていました. のんびり会場まで歩いて行きながら大阪の車と人の多さに怯えていました.
<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">田舎民なので大阪に恐怖している</p>&mdash; 柊木 (@hrgruri) <a href="https://twitter.com/hrgruri/status/754117879319044098">2016年7月16日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
会場(7階)で受付を済ませました. スピーカーは専用の場所があり, 名前を言うだけで受付が済むのは良かったです.
<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">なんとか田舎民が会場に着きました <a href="https://twitter.com/hashtag/phpkansai?src=hash">#phpkansai</a> <a href="https://t.co/wMLLK5ZZdg">pic.twitter.com/wMLLK5ZZdg</a></p>&mdash; 柊木 (@hrgruri) <a href="https://twitter.com/hrgruri/status/754119238122479616">2016年7月16日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
午前の部が終わった時にメインホールでWi-Fiが使ええますよというアナウンスが有りました. LTのデモでは, デモ用のブログを生成して終わりにしようと考えていたのですが, 実際にgit pushしてLTの最中にブログをアップロードできる可能性が出てきました.</p>
<h2>午後の部</h2>
<p>お昼ごはんを食べに行き, 会場の戻ってくると休憩場所がある8階に行きました. カンファレンスに来たのだからセッションを聞きに行くべきだですが, LTのデモの内容とスライドを変えたかったので, その作業を行いました. 当初,スライドは2分話して, 2分デモをして, 1分話すという考えのもと作っていました.
<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">2分話して, 2分デモして, 1分話すでいいのかな. 話すのもデモも2分で終わるようにしないと</p>&mdash; 柊木 (@hrgruri) <a href="https://twitter.com/hrgruri/status/753783193447206912">2016年7月15日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
しかし実際にブログを更新できそうだったのと, デモの内容を変えることでデモにかける時間が変わると思ったので, デモを最後にすることにしました. そんなわけで,スライドを少し変えてデモ用に簡単な記事を予め作っておき, シェルスクリプトでコピーできるようにしていました. そのあと簡単にですがLTの練習をしていました. LTの練習がある程度済んだらセッションを見に行きました.</p>
<h2>LT(ライトニングトーク)</h2>
<p>セッションがすべて終了すると,少しの休憩を挟み, いよいよメインホールでLTです. プロジェクターのチェックを済まし,上手側でLTのスピーカーの人たちは待機していました. 例年だとLTの順番はくじなどでランダムに決めていたようですが, 今年は<a href="http://conference.kphpug.jp/2016/timetable/">タイムテーブル</a>の順で行うことになりました. 私の順番は5番目でした.  </p>
<p>他の方のLTを見ながら, 待機場所でスライドに不備がないことを確認していました. 前の方が終わり, いよいよ私の番になったのでステージにあがり,パソコンを設定していると空席があるということで席の誘導が行われ, その後, 始まりました.<br />
自己紹介で大学生だということとIT系のイベント自体初参加でLTも初めてだということを言ったら拍手をいただきました. スライドの説明はスライドをアップロードしているので詳しくは省略します.  </p>
<p>内容としては｢github.io｣と既存の静的サイトジェネレータに少し触れて, ｢<a href="https://github.com/hrgruri/saori">Saori</a>｣の話をしました. 使い方や設定などに関してはあまり話せませんでした. 簡単にですが使い方を書いたのでSaoriを使いたい方は<a href="/repository/saori">こちら</a>をご覧ください.<br />
時間が十分に余ったので, 最後にデモを行いました. デモの内容は私が実際に使っている<a href="https://hrgruri.github.io/">ブログ</a>に記事を投稿するというものです. <br />
少しの内容ですが実際に書くのは(時間的に)怖かったので予め用意していました.  </p>
<h3>デモの内容</h3>
<ol>
<li><p>記事｢demo｣用のベースファイルを生成<br />
｢blog post demo｣と入力してベースとなるディレクトリとファイルを作成しました. ｢blog｣はaliasで｢blog='php ~/Desktop/blog/main.php'｣です.</p>
</li>
<li><p>ファイルをコピー<br />
用意していた記事をコピーする際に｢cp from to｣とする時間がもったいなかったので予め作っていたシェルスクリプトでコピーしました.</p>
</li>
<li><p>ブログを生成<br />
｢blog make｣と入力してブログを生成します. これによりlocalhostで動かすためのものとusername.github.ioで公開するものとが生成されます.</p>
</li>
<li><p>localhostで確認<br />
GitHubに上げる前のlocalhostで確認をします. PHPのビルトイン サーバを利用してWebブラウザで確認をしました.</p>
</li>
<li><p>実際に公開<br />
公開するためにadd, commit , pushをしました. ｢g add｣とかしていましたがgはgitのaliasです.</p>
</li>
<li><p>hrgruri.github.ioを確認<br />
実際に公開されたページをWebブラウザで見に行きました.</p>
</li>
</ol>
<p>Saoriについて話をしてデモもでき,最低限の言いたいことが言えたあたりで銅鑼が鳴り,初のLTが終了しました. 実は手元のiPhoneで時間を図っていたのですが, LT中に1度も見ていなかったです.  </p>
<p>そんなわけで今回のLTで</p>
<ul>
<li>github.ioは無料</li>
<li>GitHubが緑になる</li>
<li>PHP最高</li>
<li>Saoriはいいよ</li>
</ul>
<p>ということが伝わっていれば幸いです. ちなみにデモの際に投稿したのは<a href="http://hrgruri.github.io/article/2016/07/demo/">これ</a>です.</p>
<h3>LTの感想+α</h3>
<p>デモではタグ, リンク, 最近の記事の掲載などに触れることができて良かったです. しかし,プッシュをした時にすぐに終わらないのは本当に焦りました. 微妙なところで終わるのかもしれなかったですが, LTならではのアクシデントでいい経験だったと思います.<br />
始まるまでは拍手や笑いが無いものになってしまうのではないかと不安でしたが, LT冒頭の自己紹介で拍手をいただき不安と緊張がとても和らぎました. LT中も笑いがあり, やっていて楽しかったです.   </p>
<p>私のLTを聞いてくださった皆さんとLTをさせてくださった実行委員の方々に感謝したいと思います. ありがとうございました.
<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">初イベント, 初LTは最高でした <a href="https://twitter.com/hashtag/phpkansai?src=hash">#phpkansai</a></p>&mdash; 柊木 (@hrgruri) <a href="https://twitter.com/hrgruri/status/754220651079012352">2016年7月16日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<p>こちらが私のLT資料です.
<script async class="speakerdeck-embed" data-id="3177cf4c00f040e38b49921be6a1af34" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script></p>
<h2>懇親会</h2>
<p>LTと写真撮影が終わったら, 懇親会の準備のため18時まで時間があったので8階で待機となりました. Twitterを見ているとスライドのアップロードがいくつもあったので, 私もすることにしました.Speaker Deckでアカウントを作成し, アップロードをしている最中に｢LTしていた人ですよね｣と声をかけてくださった方々がいました. その人達と懇親会が始まるまでいろいろと話しをさせていただき, 懇親会でも引き続き話をさせていただきました.  </p>
<p>懇親会では飲んだり食べながらしながらいろいろな人と話をさせていただきとても楽しかったです. 知らなかったWAFのことを教えていただいたり, WordPressの話をしたりと私が知らなかったことを聞くことができました.  </p>
<p>懇親会のLTは話をしながら後ろのほうで聞いていました. 懇親会LTは3分というとても短い時間でしたが面白いものばかりで会場も大盛り上がりでした.<br />
LTのあとはじゃんけん大会が行われました. 11名が景品をもらえるとのことでした. 結果は11名の中に残り,カンファレンスのTシャツを頂きました.
<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">初カンファレンス、初LT、初懇親会で景品もらえました。 <a href="https://twitter.com/hashtag/phpkansai?src=hash">#phpkansai</a> <a href="https://t.co/f3rOMxLcEp">pic.twitter.com/f3rOMxLcEp</a></p>&mdash; 柊木 (@hrgruri) <a href="https://twitter.com/hrgruri/status/754264454884274176">2016年7月16日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<p>懇親会の終わりごろに基調講演をされたhirakuさんと少し話をさせていただきました. メルカリ様のステッカーをいただきました. ありがとうございます. パソコンにでも貼りたいと思います.  </p>
<h1>最後に</h1>
<p>こうして初めてのカンファレンス, 初めてのLT, 初めての懇親会が終わりました. 懇親会での話やTwitterを見てみると｢LT,良かったよ｣というのがあったので嬉しいです. デモも好評で良かったです. <a href="https://github.com/hrgruri/saori">リポジトリ</a>を見てみるとStarがありました. ありがとうございます.
<img src="/article/2016/07/phpcon_kansai_2016/github.png" alt="hrgruri/saori" /></p>
<p>Twitterで<a href="https://twitter.com/search?q=%23phpkansai">#phpkansai</a>を見ているとLTで話した内容(Saori)以外のことが少し話題になっていました. それは私がデモの時に使った｢g (git)｣です. Twitterを見ている限り｢git｣はエイリアスで｢g｣としている人は多い気がしますが少し会場がざわついていました. 少しでもストレスを無くすために｢g｣にするはおすすめです.</p>
<p>カンファレンスが始まる前から気になっていたのですが,私以外にも大学生は参加していたのでしょうか. 私だけということはないとは思いますが,見かけませんでした. LTの冒頭で大学生がいるか聞いておけば良かったかなと今思う.</p>
<h2>カンファレンスに参加したい学生へ</h2>
<p>PHP初心者の学生でも参加する価値はあると思います. そもそも私自身もPHPを使い始めてそれほど経っていませんし, 今回LTで話したことも静的サイトジェネレータの話であって, PHPの主な使い方であるWebアプリケーション関係の話ではないです.<br />
スライドでもPHPのコードはたったの4行しかありませんでした. PHPを触ったことがない人でもPHP(Saori)を使ってブログを公開することで, PHPに興味を持って使い始める学生が出てきてくれたら良いなと思います.<br />
また,今回のカンファレンスでは初心者向けのセッションやDBに関するセッションなど, PHPを知らなくても楽しめるものがいくつもあったと思います.<br />
LTをしたことで思ったのが, みんな優しかったです. LT後にも話しかけてくださる方々がいてとても良いカンファレンスでした.<br />
カンファレンスの参加料は1000円ですが, 学割(先着)があり今回のカンファレンスは無料でした. ちなみにLTスピーカーは招待されるので本編チケットを買う必要なし.</p>
<p>最後になりましたが, カンファレンスに出席した皆様, LTを聞いてくださった皆様, 懇親会で話をしてくださった皆様, 主催してくださった実行委員の皆様, そしてスポンサーの皆様のおかげで楽しいカンファレンスとなりました. ありがとうございました.</p>
<hr />
<h1>その他</h1>
<p>カンファレンスのスライドは,まとめてくださった方がおられるのでそちらを御覧ください.<br />
｢<a href="http://ikkitang1211.hatenablog.jp/entry/2016/07/16/145657">PHPカンファレンス関西2016 スライドリンク集 #phpkansai - お？意外といけるやん！</a>｣  </p>
<p>TogetterにPHPカンファレンス関西2016まとめがあります.<br />
｢<a href="http://togetter.com/li/1001000">PHPカンファレンス関西2016まとめ</a>｣</p>
<p>PHPカンファレンス関西に参加しようと考えた時に読んだ記事<br />
｢<a href="http://www.sigesaba.com/2014/06/phpkansai2014-relay05.php">ブラよろで学ぶPHPカンファレンス関西2014</a>｣</p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>demo</title>
<link href="https://taniko.github.io/article/2016/07/demo"></link>
<id>urn:uuid:a2835caf-e491-e2cc-87b9-f5001d079012</id>
<updated>2016-07-16T07:32:52+00:00</updated>
<summary type="html"><![CDATA[<h1>deom</h1>
<p>これはデモ用の記事です. 現在LT真っ最中です.<br />
<img src="/article/2016/07/demo/front.jpg" alt="demo" /></p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>Saoriの使い方</title>
<link href="https://taniko.github.io/article/2016/07/152308"></link>
<id>urn:uuid:5caf2536-da26-989f-a950-a46a24379348</id>
<updated>2016-07-15T14:08:00+00:00</updated>
<summary type="html"><![CDATA[<p>PHPを使ってgithub.ioでブログをやるための静的サイトジェネレータである<a href="https://github.com/hrgruri/saori">saori</a>の使い方を簡単にですがまとめました. リンクは<a href="/repository/saori">こちら</a>です.<br />
現在, 使い方だけなのでテーマの作成方法など内部的な話は書けていませんが近いうちに書きたいと思います.</p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>ブログのテーマを変えた</title>
<link href="https://taniko.github.io/article/2016/07/081625"></link>
<id>urn:uuid:7473600e-6d31-fd1a-ba82-1d76900219fa</id>
<updated>2016-07-08T07:25:33+00:00</updated>
<summary type="html"><![CDATA[<p>ブログのテーマを変えました. ただそれだけです.</p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>学年暦のスクレイピングについて</title>
<link href="https://taniko.github.io/article/2016/06/121113"></link>
<id>urn:uuid:e6e21b4a-e55c-f3f2-7e51-54bbf5804668</id>
<updated>2016-06-12T02:13:02+00:00</updated>
<summary type="html"><![CDATA[<p><a href="/article/2016/06/ritsucal/">前の記事</a>でPHPを使って,学年暦のスクレイピングを行うライブラリの紹介をしたので,今回はそれを作ったことの話をします. スクレイピングは<a href="https://github.com/FriendsOfPHP/Goutte">fabpot/goutte</a>を使用しました</p>
<h2>ページをローカルで動かす</h2>
<p>おそらくコード書いて1回では成功できず,何度も失敗すると思うので,負荷を与えないように対象のページをダウンロードしてローカルで動かしてそこにスクレイピングをしましょう.<br />
Chromeで 'Command(Control) + S'でダウンロードできます. ファイル名はindexでいいです. 次に動かし方ですが, PHPのビルトインサーバを使いましょう.</p>
<pre><code class="language-sh">cd public
php -S localhost:8000
</code></pre>
<p>詳しくは<a href="http://php.net/manual/ja/features.commandline.webserver.php">ここで</a>.</p>
<h2>スクレイピングをする</h2>
<h3>タイトル</h3>
<p>ブラウザで上記のlocalhostにアクセスをして学年暦のタイトル(ページのタイトルではない)を探します.</p>
<ol>
<li><p>2016年度　立命館大学　学年暦</p>
</li>
<li><p>2016年度　立命館大学大学院　学年暦 セメスター制
  （法学研究科、経済学研究科、経営学研究科、社会学研究科、文学研究科、国際関係研究科、政策科学研究科、応用人間科学研究科、言語教育情報研究科、公務研究科、スポーツ健康科学研究科、映像研究科、先端総合学術研究科）</p>
</li>
<li><p>2016年度　立命館大学大学院　学年暦 セメスター制
  （理工学研究科、情報理工学研究科、生命科学研究科、薬学研究科）</p>
</li>
<li><p>2016年度　立命館大学大学院　学年暦 セッション制
（テクノロジー・マネジメント研究科、経営管理研究科）</p>
</li>
<li><p>2016年度　立命館大学大学院　学年暦
  （法務研究科）</p>
</li>
</ol>
<p>この5つがあるので,これをタイトルとして,5つの学年暦を取得します. Chromeで右クリック→検証で構造を確かめられるので,見に行くとclass="mod-title type4"が割り振られているので</p>
<pre><code class="language-php">$title = $crawler-&gt;filter('.mod-title.type4')-&gt;eq($i)-&gt;text();
</code></pre>
<p>で得られます.</p>
<h3>年度</h3>
<p>年度ですが,これはタイトル内に書かれているので<a href="http://php.net/preg_match">preg_match()</a>を使って｢2016｣を拾ってあげます.</p>
<h3>各学年暦</h3>
<p>ここからがスクレイピングするのには面倒な構造になっています.というのも, 学部と大学院では構造が異なっているのです. 学部の方は, mod-wysiwyg &gt; set-table &gt; table内にtheadとtbodyが2つ(前期･後期)あります. 一方, 大学院の方はmod-wysiwyg &gt; set-table が2つ(前期･後期)です.<br />
eventはclass="event"ではなくテーブルの要素(イベント名･月･日)だと考えてください. mod-wysiwyは略.</p>
<p><img src="/article/2016/06/121113/structure.jpeg" alt="" /></p>
<p>これは不親切ですね. しかし,うまいこと下から順に配列を結合させていくと,5つの学年暦ができます. 考え方としては, 各学年暦にはset-tableが複数あり,tableの中にもtbodyが複数あることを前提に作るってことです.  結合やイベントのことなどは<a href="https://github.com/hrgruri/ritsucal/blob/master/src/Client.php">コード</a>を見てもらうほうがいいかと.  </p>
<p>同じ日の行事はまとめられているので注意してください.</p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>立命館の学年暦をスクレイピング</title>
<link href="https://taniko.github.io/article/2016/06/ritsucal"></link>
<id>urn:uuid:63d4f46c-3601-0afb-06de-1f766adfdaa6</id>
<updated>2016-06-11T09:42:03+00:00</updated>
<summary type="html"><![CDATA[<h1>ritsucal</h1>
<p>ritsucalは立命館大学･大学院の学年暦をスクレイピングするPHPのライブラリです. 前から作っていて<a href="https://github.com/hrgruri/ritsucal">GitHub</a>にあげていましたが,久しぶりに見るとREADME.mdに変な文字が混ざっていたので,いくつか修正して,そのついでに簡単な使い方を書きます.</p>
<h2>インストール</h2>
<p>インストールはcomposerからできます</p>
<pre><code class="language-sh">composer require hrgruri/ritsucal
</code></pre>
<h2>使い方</h2>
<pre><code class="language-php">&lt;?php
require 'vendor/autoload.php';
try {
    $client = new Hrgruri\Ritsucal\Client();
    $calenders = $client-&gt;getCalenders();
    var_dump($calenders);
} catch (\Hrgruri\Ritsucal\Exception\UrlException $e) {
    print "Error\n";
}
</code></pre>
<p>こんな感じでコードを書くと動きます. 得られるのは以下の学年暦.  </p>
<ol>
<li><p>2016年度　立命館大学　学年暦</p>
</li>
<li><p>2016年度　立命館大学大学院　学年暦 セメスター制
  （法学研究科、経済学研究科、経営学研究科、社会学研究科、文学研究科、国際関係研究科、政策科学研究科、応用人間科学研究科、言語教育情報研究科、公務研究科、スポーツ健康科学研究科、映像研究科、先端総合学術研究科）</p>
</li>
<li><p>2016年度　立命館大学大学院　学年暦 セメスター制
  （理工学研究科、情報理工学研究科、生命科学研究科、薬学研究科）</p>
</li>
<li><p>2016年度　立命館大学大学院　学年暦 セッション制
（テクノロジー・マネジメント研究科、経営管理研究科）</p>
</li>
<li><p>2016年度　立命館大学大学院　学年暦
  （法務研究科）</p>
</li>
</ol>
<p>var_dump()した結果の一部です</p>
<pre><code>array(5) {
  [0]=&gt;
  object(Hrgruri\Ritsucal\Calender)#66 (2) {
    ["title"]=&gt;
    string(40) "2016年度　立命館大学　学年暦"
    ["events"]=&gt;
    array(79) {
      [0]=&gt;
      object(Hrgruri\Ritsucal\Event)#111 (4) {
        ["year"]=&gt;
        int(2016)
        ["month"]=&gt;
        int(4)
        ["day"]=&gt;
        int(1)
        ["title"]=&gt;
        string(27) "前期セメスター開始"
      }
      [1]=&gt;
      object(Hrgruri\Ritsucal\Event)#65 (4) {
        ["year"]=&gt;
        int(2016)
        ["month"]=&gt;
        int(4)
        ["day"]=&gt;
        int(1)
        ["title"]=&gt;
        string(27) "オリエンテーション"
      }
</code></pre>
<p>デフォルトでは <a href="http://www.ritsumei.ac.jp/profile/info/calender/">http://www.ritsumei.ac.jp/profile/info/calender/</a> から情報を取ってきますが,</p>
<pre><code class="language-php">$calenders = $client-&gt;getCalenders('http://www.ritsumei.ac.jp/profile/info/calender/2016/');
</code></pre>
<p>などのようにすると別の年度の学年暦を取ってくることができます.</p>
<hr />
<p>追記 2016-06-25</p>
<h2>JSON</h2>
<p>他の言語でもデータを扱うためにJSON形式で保存する方法です. </p>
<pre><code class="language-php">&lt;?php
require 'vendor/autoload.php';
try {
    $client = new Hrgruri\Ritsucal\Client();
    $calenders = $client-&gt;getCalenders();
    file_put_contents(
        'file_path',
        json_encode($calenders, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE)
    );
} catch (\Hrgruri\Ritsucal\Exception\UrlException $e) {
    print "Error\n";
}
</code></pre>
<p><a href="http://php.net/file_put_contents">file_put_contents()</a>で指定したところに保存できます. <a href="http://php.net/json_encode">json_encode()</a>のJSON_PRETTY_PRINT, JSON_UNESCAPED_UNICODEは見やすい形にしてくれるオプションです.</p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>Saori v0.5を作った</title>
<link href="https://taniko.github.io/article/2016/06/102235"></link>
<id>urn:uuid:23fc001a-3e3f-bf8b-c5ed-a324dac1d554</id>
<updated>2016-06-10T13:35:58+00:00</updated>
<summary type="html"><![CDATA[<p>Saori v0.5.0をリリースした. これで簡単にユーザが新たなページを生成することができるようになった. そして,<a href="http://hrgruri.github.io/article/2016/06/042227/">前の記事</a>で言っていたテーブルがおかしい理由はテーブルのCSSが記述されていなかったからでした. ボーダの設定を指定なかったので,枠線がない状態で出力されていただけでした.</p>
<hr />
<p>そろそろv0.x系をやめてv1.0にしてもいい頃かもしれない. 最初に思っていた必要な最低限の機能はできたと思う.<br />
それとちゃんとした使い方をまとめて記事かページを生成する必要がある. 今のところ他の人が使うのには不親切だ. README.mdには記事の編集のことしか記述していない. (誰か作る人がいるのかわからないが)テーマの作り方やユーザページについてなど. こういったものをまとめ終えたらv1.0.0にしたいと思います.</p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>Saori v0.5.x-devにてTableがおかしい</title>
<link href="https://taniko.github.io/article/2016/06/042227"></link>
<id>urn:uuid:3d2ce163-17c3-11e4-8af0-6434679688d7</id>
<updated>2016-06-04T13:27:39+00:00</updated>
<summary type="html"><![CDATA[<p>現在Saoriのv0.5を作っていますが, どうやらテーブルが正しく表示されないです.</p>
<pre><code class="language-markdown">|name|値|
|:-:|:-:|
|f85|キーワード|
|f23|絵師|
|f83|画題|
</code></pre>
<p>上記の記述をしたら以下の様なテーブルが生成されました.</p>
<p><img src="/article/2016/06/042227/table.png" alt="table" /></p>
<p>罫線が入っていないので,テーブルとしてわかりにくくなっています. 今のところ原因がわかっていません. Atomの上では正しく表示されているので記述に間違いはないのではないかとは思います. cebe/markdownを使ってMarkdownを変換しています. とりあえず他のライブラリを使ってみてどう表示されるのか試してみます. あとHTMLも確認してみたいと思います.</p>
<p>ちなみにv0.5.x-devでは記事とユーザページ(contents/page/NAME.md)の画像ファイルのパスの書き換えはできるようになりました. </p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>立命館ARCのスクレイピング</title>
<link href="https://taniko.github.io/article/2016/06/arc"></link>
<id>urn:uuid:5ae20fc7-96ab-3424-13f6-7631c8288d3d</id>
<updated>2016-06-02T12:12:11+00:00</updated>
<summary type="html"><![CDATA[<h1>PHPでスクレイピング</h1>
<p>創成3では立命館大学アート・リサーチセンター(以下ARC)のアクセスログを使って資料の推薦を行うことが目的でした. 最初はリンクだけを使った質素なものを作る予定でしたが, 途中でスクレイピングをして, サイト内だけで簡単な検索･閲覧をできるようにすることになりました. PHPを使ってやったのですが,これがとっても大変でした.</p>
<h2>謎のname</h2>
<p>HTMLのFormのほとんどにはname属性がつけられています.</p>
<pre><code class="language-html">&lt;input type="text" name="username"&gt;
</code></pre>
<p>nameからどういった値が入るのか推測できるようになっているべきです.上の例だとユーザ名が入るのだと推測できます. しかしながらARCのフォームでは全くそれがなされていなかった.</p>
<h3>浮世絵データベース</h3>
<table>
<thead>
<tr><th align="center">name</th><th align="center">値</th></tr>
</thead>
<tbody>
<tr><td align="center">f85</td><td align="center">キーワード</td></tr>
<tr><td align="center">f23</td><td align="center">絵師</td></tr>
<tr><td align="center">f83</td><td align="center">画題</td></tr>
</tbody>
</table>
<h3>古典籍データベース</h3>
<table>
<thead>
<tr><th align="center">name</th><th align="center">値</th></tr>
</thead>
<tbody>
<tr><td align="center">f61</td><td align="center">資料名</td></tr>
<tr><td align="center">f63</td><td align="center">編著者</td></tr>
</tbody>
</table>
<p>まったく謎です. ちなみに浮世絵DBの絵師であるf23ですが,古典籍DBでは資料のソート(成立月日順)のために使われています.
ちなみに統一されているものも一応あります.</p>
<table>
<thead>
<tr><th align="center">name</th><th align="center">値</th></tr>
</thead>
<tbody>
<tr><td align="center">-max</td><td align="center">表示件数</td></tr>
<tr><td align="center">skip</td><td align="center">スキップ数</td></tr>
<tr><td align="center">この2つは推測できますね. なぜかmaxではなく-maxですが. 統一されておらず,推測できないのはスクレイピングする側としては辛いですね. サーバサイドのコードを書くに扱いづらくなかったのでしょうか?</td></tr>
</tbody>
</table>
<h2>作ったライブラリ</h2>
<p>オープンキャンパスのために創成3のサイトを再び作っているので使っているが, それさえ終わればもう使うことはないと思う. <a href="https://github.com/hrgruri/rarcs">GitHub</a>にアップロードしています. またComposerからインストールして使うことができます.</p>
<pre><code class="language-sh">composer require hrgruri/rarcs
</code></pre>
<pre><code class="language-php">&lt;?php
require 'vendor/autoload.php';

$client = new Hrgruri\Rarcs\NishikieClient();
var_dump($client-&gt;getDetail('arcUP2435'));
/*
object(Hrgruri\Rarcs\Asset\Nishikie)#51 (5) {
  ["artist"]=&gt;
  string(6) "広貞"
  ["id"]=&gt;
  string(9) "arcUP2435"
  ["url"]=&gt;
  string(62) "http://www.dh-jac.net/db/nishikie/results-big.php?f1=arcUP2435"
  ["title"]=&gt;
  string(54) "「菅原　三ノ口」「松王丸」「梅王丸」"
  ["cover"]=&gt;
  string(87) "http://www.arc.ritsumei.ac.jp/archive01/theater/image/PB/arc/Prints/arcUP/arcUP2435.jpg"
}
 */
</code></pre>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>Saori v0.4.0を作りました</title>
<link href="https://taniko.github.io/article/2016/05/301402"></link>
<id>urn:uuid:4e289b13-8aa9-2eff-c8df-ce1f4431688a</id>
<updated>2016-05-30T05:02:18+00:00</updated>
<summary type="html"><![CDATA[<p>v0.4.0での変更点は</p>
<ul>
<li>Twigファイルの場所の変更</li>
<li>config.jsonの場所を変更</li>
<li>ユーザページの生成機能</li>
</ul>
<h2>Twigファイルの場所の変更について</h2>
<p>Twigファイルの場所をtheme/:theme_name/twig/にしました. サイトを生成するのに必要なテンプレートはtemplate内に置きました.これからはsaoriが直接呼び出すTwigファイルはここにおいていこうと思います.  </p>
<h2>config.jsonの場所を変更について</h2>
<p>contentsディレクトリ内にconfig.jsonを設置するように変更しました. 何故したかというと,config.jsonもgitで管理しやすくするためです.</p>
<h2>ユーザページの生成機能について</h2>
<p>それと<a href="/article/2016/04/261251/">前に言ってた</a>,ユーザがMarkdownファイルを作るだけでページを生成できるようにしました. 例えば,contents/page/about.mdというファイルを作るとtemplate/page.twigを利用して,/about/index.htmlが作られます. しかしこれだと画像が扱えない(作ってから気づいた)ので,v0.5では画像をどこかにコピーしてMarkdownファイル内にある画像のパスをそこに書き換えようかな思います.</p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>icd3</title>
<link href="https://taniko.github.io/article/2016/04/icd3"></link>
<id>urn:uuid:46e3d3e9-60be-c55d-95b1-163308e1424d</id>
<updated>2016-04-29T14:40:52+00:00</updated>
<summary type="html"><![CDATA[<p>先生｢創成3で作ってもらったサイトをオープンキャンパスで見せようと思う｣<br />
私｢あっ,はい. ちゃんとしたコードに直したかったので, 修正したら渡します｣<br />
先生｢それなんだけどね, 今のままだと書籍だけで見た感じが微妙だから絵も推薦できるようにして. 7月末までにしておいてね｣</p>
<p>こんなわけで,前に作ったサイトの見た目をとかを修正するだけだったつもりが, 先生からのお願い(?)で推薦対象となるカテゴリーを増やすことになりました.<br />
追加することになったのは浮世絵. 浮世絵のログは抽出してDBに保存していなかったので,もう一度アクセスログの解析をすることになりました. クローラなどのログはすでに落としてあるのがあったと思うので,そこからもう一度.</p>
<p><Font color="red">I Love PHP</font> なのでもちろんPHPを使います. スクレイピングもPHPです. スクレイピングのコードも前まではクラスを作ってそれを使っていただけだったのですが, 今回はComposerでインストールして使えるようにして公開したいと思います.</p>
<p>実行環境は,今日,研究室に立てたUbuntu Serverを使おうかなと. 開発段階では研究室のみからアクセスできるようにしておけばいい. オープンキャンパスの時のみ,大学のIPだけを通すようにするとか考えたが... 前回と同様にデータを先生に渡すだけになるのかな</p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>Saori v0.3を作った</title>
<link href="https://taniko.github.io/article/2016/04/261251"></link>
<id>urn:uuid:10cd51a9-379b-acb9-e10c-0fe6cbeb7f26</id>
<updated>2016-04-26T03:51:20+00:00</updated>
<summary type="html"><![CDATA[<p>Saoriにいくつか機能を加えた.</p>
<h2>v0.2</h2>
<p>v0.2ではフィード(/feed.atom)を生成するようにしたり,簡単なタグ機能を加えた.</p>
<h2>v0.3</h2>
<p>v0.3では機能の追加ではなく,コードを分けたり修正したりした.あと生成する際に使用するtwigファイルの場所を変更したので,v0.2からv0.3でテーマの互換性がないですが,sampleテーマは直した.</p>
<h2>v0.4でしたいこと</h2>
<p>v0.4ではconfig.jsonの場所をcontentsの中にしたい. あとinitでconfig.jsonファイルの生成も. 機能としてはテーマが設定したページを作れるようにしたり,ユーザがMarkdownファイルを作るだけで設定されたテンプレートからページを生成できるようにしたい.  </p>
<hr />
<p>現在アクセスできるのは</p>
<ul>
<li>/page/:page_number</li>
<li>/article/:year/:month/:title</li>
<li>/tag</li>
<li>/tag/:tag_name/:page_number</li>
</ul>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>Saori v0.1.0のリリース</title>
<link href="https://taniko.github.io/article/2016/04/saori"></link>
<id>urn:uuid:93c68bd7-84eb-8947-a71c-48d1a86faad7</id>
<updated>2016-04-24T09:53:20+00:00</updated>
<summary type="html"><![CDATA[<h2>Saoriについて</h2>
<p>SaoriというPHPを使った簡単なサイトジェネレータを作りました.現在のバージョンはv0.1.0です.これで,PHP動かない場所(たとえばusername.github.io)でもブログを公開できます. 仕組みとしてはローカルでPHPを使ってHTMLを生成して,それを公開するって流れです.<br />
現在,テーマはsampleしかないのです.これでは1ページあたりの記事の数は5つとなっています.
使い方は<a href="https://github.com/hrgruri/saori">GitHub</a>で.まだまだ開発途中で,追加したい機能がいくつかあるのでがんばります.  </p>
<pre><code class="language-sh">composer install hrgruri/saori
</code></pre>
<h3>機能</h3>
<ul>
<li>各記事用のページの生成(/article/:year/:month/title)</li>
<li>記事(N件)ごとのページを生成(/page/:page_number)</li>
</ul>
<h3>予定</h3>
<p>各記事に対する設定でタグの欄があるのですが,Saoriの機能ではタグ一覧取得,タグ用のページの生成がないので,タグ機能を加えようと思います.<br />
フィード機能(ATOM/RSS)がまだできていないので,それもできればいいかなと思っています.</p>
<hr />
<p>プログラムの話は全くしていないので,それに関しては近いうちに別の記事でします.</p>
]]></summary>
</entry>
</feed>
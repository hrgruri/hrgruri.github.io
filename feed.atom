<?xml version="1.0" encoding="utf-8" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>blog\hrgruri</title>
<link href="https://hrgruri.github.io"></link>
<updated>2016-09-12T10:52:37+09:00</updated>
<id>urn:uuid:1deced78-1925-4a0a-6b37-d3e39e3b7725</id>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>pixiv 2016 SUMMER BOOT CAMPに参加</title>
<link href="/article/2016/09/summer-boot-camp-2016"></link>
<id>urn:uuid:8488d73c-a6bc-768b-e069-c0509f214fd8</id>
<updated>2016-09-09T15:29:37+09:00</updated>
<summary type="html"><![CDATA[<h1>ピクシブのインターンに参加</h1>
<p><a href="https://ssl.pixiv.net/recruit/entry/summer_intern16.php">pixiv 2016 SUMMER BOOT CAMP</a>にエンジニア職で参加をしたのでその話です.</p>
<h2>参加するまで</h2>
<p>GitHub選考のあるインターンを探していたところ, ピクシブさんのインターンを見つけました. 普段からPHPを使っており, pixivはPHPで作られているので,これは応募するしかないと思い応募しました.<br />
書類選考と,面接(Skype)がありましたが無事にパスして参加することになりました.</p>
<h2>インターンの形式</h2>
<p>今回のインターンは学生たちが集まってハッカソンをするとかではなく, 実際のチームに配属され, そこで仕事をするというもの. (全体)会議にも参加します. チームによってはユーザの入会率や開封率などの数字で振り返ったりもします. 私はpixivメンテナンスチームに配属となり, バグ修正やコードのリファクタリングを行ったので, ユーザ数などで振り返るとかってのはなかったです. 私の場合, テストの作成だったり, 新しいクラスの設計とかもやりました.</p>
<h3>主な流れ(メンテナンスチーム)</h3>
<ol>
<li>コードの改修</li>
<li>プルリクエストの作成</li>
<li>コードレビュー</li>
<li>コードの修正</li>
<li>本体にマージしてもらえる</li>
</ol>
<h2>業務とか</h2>
<p>修正･改修した箇所はいくつかあるのですが, その中から1つ話したいと思います.</p>
<h3>画像投稿時のバグ</h3>
<p>修正したバグの1つは, とあるフォームで巨大な画像をアップロードするとPHPのエラーが出てしまうというものでした.  (本番環境では再現させてないのですが, もしかしたら白い画面?)<br />
まずはじめに画像のバリデーション失敗時にエラー画面を出すようにしたら, 該当箇所は修正できました. しかしながら, 別のところがおかしくなってしまいました. どうやら修正の仕方を間違えていた. なので他の正常なフォームと比べながらコードを辿っていき, エラーの原因となっている箇所を探しました.<br />
無事に該当箇所を見つけて修正できたのですが, 該当箇所を探しているうちに別のバグ(?)もあったのでそれも報告して修正をしました.  </p>
<h3>その他</h3>
<p>コードを書く以外にも朝会, 夕会, 全体会議とかがありました. 全体会議はいろいろな数字や戦略の話が出たりと, 本当にインターン生も参加していいのかってものでした.</p>
<h2>参加してみて</h2>
<p>初めてのインターンということで, 自分がどこまで出来るのかなど不安だらけでしたが5日間楽しむことができました. 他とは比較できないのですが, ものすごくいいインターンでした. オフィスは会議室以外に壁がなく, ニックネームで呼び合うというコミュニケーションが溢れているところでした.<br />
開発している時に感じたのは, PHPDocの大切さです. 今までは個人でコードを書くことばかりだったので, ドキュメントを残さないことが多々ありましたが, 大規模で多くの人が書いたコードを触るにあたって, ドキュメントの大切が分かりました.  他にもメンターさんから, 書かれているコードに敬意を持つこととメンテナンスの重要さを教わりました.<br />
メンターさんたちと話す機会も多く, 会社やサービスの現状や大規模なサービスならではの悩みなど聞くことができた. 大変貴重な体験ができたインターンでした.</p>
<h2>終わりに</h2>
<p>5日間と短い期間でしたが, 学ぶことの多い5日間でした.  5日間ありがとうございました. 参加できるようなら, また参加したいです.</p>
<hr />
<p>Twitter  <a href="https://twitter.com/search?src=typd&amp;q=%23pixiv_BOOTCAMP">#pixiv_BOOTCAMP</a></p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>学年暦APIを作った</title>
<link href="/article/2016/08/ritsucal_api"></link>
<id>urn:uuid:5dfbe934-ffcc-ef2b-89ca-da78f6da9802</id>
<updated>2016-08-26T22:41:38+09:00</updated>
<summary type="html"><![CDATA[<p>簡単な大学の学年暦APIを作ったのでその報告です.</p>
<p><a href="https://ritsucal.hrgruri.com">https://ritsucal.hrgruri.com</a> です</p>
<p>大学と大学院(情報理工学研究科)の学年暦をJSONで取得できるという簡単なものです. 使い方は<a href="https://ritsucal.hrgruri.com/doc">ドキュメント</a>を見てもらえればいいかと.<br />
検索機能ですが,そのうちsince, untilができるようにはしたいと思います</p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>saori v2.0を開発中</title>
<link href="/article/2016/08/041630"></link>
<id>urn:uuid:bb22f188-4e49-f02d-8d33-adc56979ae35</id>
<updated>2016-08-04T16:27:14+09:00</updated>
<summary type="html"><![CDATA[<p><code>composer create-project</code>でインストールできるようにして, symfony/consoleを利用してsaoriを使用できるようにしました. あとnamespaceを修正.</p>
<h2>v2.0-devをインストール</h2>
<p><code>composer create-project hrgruri/saori:v2.0.x-dev blog</code>で開発途中のv2.0をインストールして始めることができます. 最後の<code>blog</code>はディレクトリ名なので別のものに変えても構いません.  </p>
<h2>使用方法</h2>
<pre><code class="language-sh">composer create-project hrgruri/saori:v2.0.x-dev blog
cd blog
php saori

#初期化
php saori init

#下書きファイルを生成 (いきなりpostを使ってもいい)
php saori draft first_article

#記事の投稿
php saori post first_article

#静的サイトを生成
php saori build
</code></pre>
<p>現在のところ,init, draft, post, buildが使用できます. <code>-h</code>使えば簡単な説明が出ると思うのでそちらを参考に.</p>
<p><code>php saori draft</code>は別に使用しないでいきなり<code>php saori post</code>しても利用できるのですが, <code>draft</code>を使ったほうがいいかと.</p>
<h2>今後</h2>
<p><code>draft</code>した時にはconfig.jsonが作られず, <code>post</code>した時に作られるのですが, これだと<code>post</code>した後じゃないとconfig.jsonがさわれない. config.jsonを<code>draft</code>でも生成しておき, timestampを<code>post</code>した時に追加させようと思います.  </p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>弊大学の闇 (学年暦編)</title>
<link href="/article/2016/07/calender"></link>
<id>urn:uuid:e88658d3-84af-858f-2723-092c0d6110e2</id>
<updated>2016-07-20T16:31:04+09:00</updated>
<summary type="html"><![CDATA[<h1>学年暦の闇</h1>
<p>大学の行事をJSONで返してくれるようなものを作ろうとしていた時に気づいた弊大学の闇を話したいと思います.</p>
<h2>calender ?</h2>
<p>PHPを使って学年暦をスクレイピングする<a href="https://github.com/hrgruri/ritsucal">ライブラリ</a>に行事の検索機能を追加しようとしていました. 検索機能と言っても年･月･日を連想配列で渡すと該当の行事が配列で帰ってくる簡単なものです.<br />
引数の型が指定できるので<code>\Hrgruri\Ritsucal\Calendar</code>型と<code>array</code>型を引数にしてメソッドを作りました. 学部の学年暦と今日の日付でテストをするとTypeError. 型が違うというエラー. 該当するクラスを見に行くとあるのは<code>src/Calender.php</code>.
<font color=red>Calender.php </font>?<br />
CalendarではなくCalender. ちなみにCalenderは光沢機のこと.</p>
<p>タイプミス? やってしまったと思い, 置換しようと｢calender｣で検索すると</p>
<pre><code class="language-php">private $url = 'http://www.ritsumei.ac.jp/profile/info/calender/';
</code></pre>
<p>までヒットした.</p>
<h2>大学の間違え</h2>
<p>ブラウザで確認したところ<br />
<a href="http://www.ritsumei.ac.jp/profile/info/calender/">http://www.ritsumei.ac.jp/profile/info/calender/</a> は存在しているが,<br />
<a href="http://www.ritsumei.ac.jp/profile/info/calendar/">http://www.ritsumei.ac.jp/profile/info/calendar/</a> は存在していない.  </p>
<p>大学側も間違えていた. 学年暦のページが光沢機(calender)になっている.</p>
<h2>今回の原因</h2>
<p><del>そもそも大学側が間違えていたので, 私が間違えたのは大学のせいである. むしろ間違いに合わせているので,私は間違えていない</del></p>
<ol>
<li>単語の綴り確認もせずに,学年暦のURLに合わせてクラス名を決めてしまっていた.</li>
<li>大学のホームページは正しいと思いんでいた.</li>
<li>補完に頼り過ぎた.</li>
</ol>
<h2>まとめ</h2>
<p>英語の綴りは確かめましょう. Googleで｢学年暦｣と検索して1番上に来るような弊大学のホームページだからといって間違いがないとは思ってはいけない.<br />
そして<font color=red>弊大学の学年暦は光沢機</font></p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>Saoriの下書きとキャッシュ</title>
<link href="/article/2016/07/saori_article_cache"></link>
<id>urn:uuid:43bea9e6-6e3c-81c1-98e6-9271da57a7e0</id>
<updated>2016-07-19T14:14:19+09:00</updated>
<summary type="html"><![CDATA[<h1>saori v1.1の開発</h1>
<p>現在saori v1.1の開発を行っています.  </p>
<ul>
<li>下書き機能</li>
<li>記事のキャッシュ</li>
</ul>
<p>に関することを行いました.  </p>
<h2>下書き機能</h2>
<p>下書き機能は<code>php main.php draft :name</code>とするとcontents/draft/:name/article.mdが作成されてここで記事の下書きができるよになるものです. 投稿したい場合は<code>php main.php post :name</code>とするとcontents/article/yyyy/mm/:nameにコピーされます. 記事のconfigファイルは<code>post</code>した時に作成されます.</p>
<h2>記事のキャッシュ</h2>
<p>今まではarticle.mdの画像パスを書き換えたものをcache/に作成しておき, <code>article.html()</code>でarticle.mdを読み込んでパースをしていました.<br />
これを予めパースしておきarticle.htmlをcache/に作成しておき, <code>article.html()</code>でarticle.htmlを読み込むというものに変更しました.</p>
<h3>時間計測</h3>
<p>500回ループさせて時間を計測しました. 変更前後で2回計測.</p>
<table>
<thead>
<tr><th></th><th>変更前</th><th>変更後</th></tr>
</thead>
<tbody>
<tr><td>1回目</td><td>60.15</td><td>53.39</td></tr>
<tr><td>2回目</td><td>59.77</td><td>54.78</td></tr>
<tr><td>平均</td><td>59.96</td><td>54.085</td></tr>
</tbody>
</table>
<p>記事の数やブログのテンプレートによって前後するとは思いますが, 方式を変えたことで5.875秒削減できました. 現在のところブログを生成する際には誤差かもしれませんが, 記事数が増えれば差が大きくなっていくかもしれません.</p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>PHPカンファレンス 関西2016でLT</title>
<link href="/article/2016/07/phpcon_kansai_2016"></link>
<id>urn:uuid:1999e7a8-618d-3848-9a73-dba4fabec3b4</id>
<updated>2016-07-17T23:23:30+09:00</updated>
<summary type="html"><![CDATA[<p>PHPカンファレンス関西 2016に参加をして, ブログを書くまでがカンファレンスだと言われたので書きたいと思います. 初めてのIT系イベント, 初めてのLT, 初めての懇親会でした. 先に断っておきますがカンファレンスでの基調講演やセッションの感想ではなく個人的な話が主です.</p>
<h1>当日まで</h1>
<h2>カンファレンスに参加</h2>
<p>そもそもPHPカンファレンス関西というのを知ったのが, 2015年のカンファレンスの動画をYouTubeで見つけた時です. なので知ってから1年も経っていません.<br />
東京は行くのが厳しいですが, 大阪なら行けるということで2016年のPHPカンファレンス関西には参加したいと思いました.
<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">PHPについて勉強しなきゃ。カンファレンス・関西を見に行ってみたい</p>&mdash; 柊木 (@hrgruri) <a href="https://twitter.com/hrgruri/status/675512116514701312">2015年12月12日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
その時点ではまだ何月何日に開催されるのかわかりませんでした.
月日は流れ, 開催日が発表されてそれを確かめると7月16日. 予定も空いているので参加を決意しました. この時点ではただ単にカンファレンスを聞きに行くだけの予定でした.<br />
一応,少しずつですが<a href="https://github.com/hrgruri/saori">hrgruri/saori</a>の開発をしていました.  </p>
<h2>LT参加を決意</h2>
<p>6月になってもまだLTの応募がありました. セッション枠は募集終了していたと思います.
<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">カンファレンスのLT募集のフォームがまだあるってことは、LT募集しているのかな？</p>&mdash; 柊木 (@hrgruri) <a href="https://twitter.com/hrgruri/status/740189166785306624">2016年6月7日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
カンファレンスに参加をするんだったら話したいなと思い, 思い切ってLTの応募をしました. 落選するだろうなと思っていたのですが, 6月16日に当選メールが来て喜ぶと同時に(まだまだ先ですが)緊張しました.    </p>
<h2>前日</h2>
<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">デモをやったら5分で収まるかな? 怪しい</p>&mdash; 柊木 (@hrgruri) <a href="https://twitter.com/hrgruri/status/753777772007264256">2016年7月15日</a></blockquote>
<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">CDN使っているのでオフラインだとデザインがかなり壊れるので、デモ用にダウンロードしてパスを書き換えた状態のものを用意しておく</p>&mdash; 柊木 (@hrgruri) <a href="https://twitter.com/hrgruri/status/753920059337281536">2016年7月15日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<h1>当日</h1>
<h2>午前の部</h2>
<p>開場が10時からで,大阪駅には9時30分ごろに着いていました. のんびり会場まで歩いて行きながら大阪の車と人の多さに怯えていました.
<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">田舎民なので大阪に恐怖している</p>&mdash; 柊木 (@hrgruri) <a href="https://twitter.com/hrgruri/status/754117879319044098">2016年7月16日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
会場(7階)で受付を済ませました. スピーカーは専用の場所があり, 名前を言うだけで受付が済むのは良かったです.
<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">なんとか田舎民が会場に着きました <a href="https://twitter.com/hashtag/phpkansai?src=hash">#phpkansai</a> <a href="https://t.co/wMLLK5ZZdg">pic.twitter.com/wMLLK5ZZdg</a></p>&mdash; 柊木 (@hrgruri) <a href="https://twitter.com/hrgruri/status/754119238122479616">2016年7月16日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
午前の部が終わった時にメインホールでWi-Fiが使ええますよというアナウンスが有りました. LTのデモでは, デモ用のブログを生成して終わりにしようと考えていたのですが, 実際にgit pushしてLTの最中にブログをアップロードできる可能性が出てきました.</p>
<h2>午後の部</h2>
<p>お昼ごはんを食べに行き, 会場の戻ってくると休憩場所がある8階に行きました. カンファレンスに来たのだからセッションを聞きに行くべきだですが, LTのデモの内容とスライドを変えたかったので, その作業を行いました. 当初,スライドは2分話して, 2分デモをして, 1分話すという考えのもと作っていました.
<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">2分話して, 2分デモして, 1分話すでいいのかな. 話すのもデモも2分で終わるようにしないと</p>&mdash; 柊木 (@hrgruri) <a href="https://twitter.com/hrgruri/status/753783193447206912">2016年7月15日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
しかし実際にブログを更新できそうだったのと, デモの内容を変えることでデモにかける時間が変わると思ったので, デモを最後にすることにしました. そんなわけで,スライドを少し変えてデモ用に簡単な記事を予め作っておき, シェルスクリプトでコピーできるようにしていました. そのあと簡単にですがLTの練習をしていました. LTの練習がある程度済んだらセッションを見に行きました.</p>
<h2>LT(ライトニングトーク)</h2>
<p>セッションがすべて終了すると,少しの休憩を挟み, いよいよメインホールでLTです. プロジェクターのチェックを済まし,上手側でLTのスピーカーの人たちは待機していました. 例年だとLTの順番はくじなどでランダムに決めていたようですが, 今年は<a href="http://conference.kphpug.jp/2016/timetable/">タイムテーブル</a>の順で行うことになりました. 私の順番は5番目でした.  </p>
<p>他の方のLTを見ながら, 待機場所でスライドに不備がないことを確認していました. 前の方が終わり, いよいよ私の番になったのでステージにあがり,パソコンを設定していると空席があるということで席の誘導が行われ, その後, 始まりました.<br />
自己紹介で大学生だということとIT系のイベント自体初参加でLTも初めてだということを言ったら拍手をいただきました. スライドの説明はスライドをアップロードしているので詳しくは省略します.  </p>
<p>内容としては｢github.io｣と既存の静的サイトジェネレータに少し触れて, ｢<a href="https://github.com/hrgruri/saori">Saori</a>｣の話をしました. 使い方や設定などに関してはあまり話せませんでした. 簡単にですが使い方を書いたのでSaoriを使いたい方は<a href="/repository/saori">こちら</a>をご覧ください.<br />
時間が十分に余ったので, 最後にデモを行いました. デモの内容は私が実際に使っている<a href="https://hrgruri.github.io/">ブログ</a>に記事を投稿するというものです. <br />
少しの内容ですが実際に書くのは(時間的に)怖かったので予め用意していました.  </p>
<h3>デモの内容</h3>
<ol>
<li><p>記事｢demo｣用のベースファイルを生成<br />
｢blog post demo｣と入力してベースとなるディレクトリとファイルを作成しました. ｢blog｣はaliasで｢blog='php ~/Desktop/blog/main.php'｣です.</p>
</li>
<li><p>ファイルをコピー<br />
用意していた記事をコピーする際に｢cp from to｣とする時間がもったいなかったので予め作っていたシェルスクリプトでコピーしました.</p>
</li>
<li><p>ブログを生成<br />
｢blog make｣と入力してブログを生成します. これによりlocalhostで動かすためのものとusername.github.ioで公開するものとが生成されます.</p>
</li>
<li><p>localhostで確認<br />
GitHubに上げる前のlocalhostで確認をします. PHPのビルトイン サーバを利用してWebブラウザで確認をしました.</p>
</li>
<li><p>実際に公開<br />
公開するためにadd, commit , pushをしました. ｢g add｣とかしていましたがgはgitのaliasです.</p>
</li>
<li><p>hrgruri.github.ioを確認<br />
実際に公開されたページをWebブラウザで見に行きました.</p>
</li>
</ol>
<p>Saoriについて話をしてデモもでき,最低限の言いたいことが言えたあたりで銅鑼が鳴り,初のLTが終了しました. 実は手元のiPhoneで時間を図っていたのですが, LT中に1度も見ていなかったです.  </p>
<p>そんなわけで今回のLTで</p>
<ul>
<li>github.ioは無料</li>
<li>GitHubが緑になる</li>
<li>PHP最高</li>
<li>Saoriはいいよ</li>
</ul>
<p>ということが伝わっていれば幸いです. ちなみにデモの際に投稿したのは<a href="http://hrgruri.github.io/article/2016/07/demo/">これ</a>です.</p>
<h3>LTの感想+α</h3>
<p>デモではタグ, リンク, 最近の記事の掲載などに触れることができて良かったです. しかし,プッシュをした時にすぐに終わらないのは本当に焦りました. 微妙なところで終わるのかもしれなかったですが, LTならではのアクシデントでいい経験だったと思います.<br />
始まるまでは拍手や笑いが無いものになってしまうのではないかと不安でしたが, LT冒頭の自己紹介で拍手をいただき不安と緊張がとても和らぎました. LT中も笑いがあり, やっていて楽しかったです.   </p>
<p>私のLTを聞いてくださった皆さんとLTをさせてくださった実行委員の方々に感謝したいと思います. ありがとうございました.
<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">初イベント, 初LTは最高でした <a href="https://twitter.com/hashtag/phpkansai?src=hash">#phpkansai</a></p>&mdash; 柊木 (@hrgruri) <a href="https://twitter.com/hrgruri/status/754220651079012352">2016年7月16日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<p>こちらが私のLT資料です.
<script async class="speakerdeck-embed" data-id="3177cf4c00f040e38b49921be6a1af34" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script></p>
<h2>懇親会</h2>
<p>LTと写真撮影が終わったら, 懇親会の準備のため18時まで時間があったので8階で待機となりました. Twitterを見ているとスライドのアップロードがいくつもあったので, 私もすることにしました.Speaker Deckでアカウントを作成し, アップロードをしている最中に｢LTしていた人ですよね｣と声をかけてくださった方々がいました. その人達と懇親会が始まるまでいろいろと話しをさせていただき, 懇親会でも引き続き話をさせていただきました.  </p>
<p>懇親会では飲んだり食べながらしながらいろいろな人と話をさせていただきとても楽しかったです. 知らなかったWAFのことを教えていただいたり, WordPressの話をしたりと私が知らなかったことを聞くことができました.  </p>
<p>懇親会のLTは話をしながら後ろのほうで聞いていました. 懇親会LTは3分というとても短い時間でしたが面白いものばかりで会場も大盛り上がりでした.<br />
LTのあとはじゃんけん大会が行われました. 11名が景品をもらえるとのことでした. 結果は11名の中に残り,カンファレンスのTシャツを頂きました.
<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">初カンファレンス、初LT、初懇親会で景品もらえました。 <a href="https://twitter.com/hashtag/phpkansai?src=hash">#phpkansai</a> <a href="https://t.co/f3rOMxLcEp">pic.twitter.com/f3rOMxLcEp</a></p>&mdash; 柊木 (@hrgruri) <a href="https://twitter.com/hrgruri/status/754264454884274176">2016年7月16日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<p>懇親会の終わりごろに基調講演をされたhirakuさんと少し話をさせていただきました. メルカリ様のステッカーをいただきました. ありがとうございます. パソコンにでも貼りたいと思います.  </p>
<h1>最後に</h1>
<p>こうして初めてのカンファレンス, 初めてのLT, 初めての懇親会が終わりました. 懇親会での話やTwitterを見てみると｢LT,良かったよ｣というのがあったので嬉しいです. デモも好評で良かったです. <a href="https://github.com/hrgruri/saori">リポジトリ</a>を見てみるとStarがありました. ありがとうございます.
<img src="/article/2016/07/phpcon_kansai_2016/github.png" alt="" /></p>
<p>Twitterで<a href="https://twitter.com/search?q=%23phpkansai">#phpkansai</a>を見ているとLTで話した内容(Saori)以外のことが少し話題になっていました. それは私がデモの時に使った｢g (git)｣です. Twitterを見ている限り｢git｣はエイリアスで｢g｣としている人は多い気がしますが少し会場がざわついていました. 少しでもストレスを無くすために｢g｣にするはおすすめです.</p>
<p>カンファレンスが始まる前から気になっていたのですが,私以外にも大学生は参加していたのでしょうか. 私だけということはないとは思いますが,見かけませんでした. LTの冒頭で大学生がいるか聞いておけば良かったかなと今思う.</p>
<h2>カンファレンスに参加したい学生へ</h2>
<p>PHP初心者の学生でも参加する価値はあると思います. そもそも私自身もPHPを使い始めてそれほど経っていませんし, 今回LTで話したことも静的サイトジェネレータの話であって, PHPの主な使い方であるWebアプリケーション関係の話ではないです.<br />
スライドでもPHPのコードはたったの4行しかありませんでした. PHPを触ったことがない人でもPHP(Saori)を使ってブログを公開することで, PHPに興味を持って使い始める学生が出てきてくれたら良いなと思います.<br />
また,今回のカンファレンスでは初心者向けのセッションやDBに関するセッションなど, PHPを知らなくても楽しめるものがいくつもあったと思います.<br />
LTをしたことで思ったのが, みんな優しかったです. LT後にも話しかけてくださる方々がいてとても良いカンファレンスでした.<br />
カンファレンスの参加料は1000円ですが, 学割(先着)があり今回のカンファレンスは無料でした. ちなみにLTスピーカーは招待されるので本編チケットを買う必要なし.</p>
<p>最後になりましたが, カンファレンスに出席した皆様, LTを聞いてくださった皆様, 懇親会で話をしてくださった皆様, 主催してくださった実行委員の皆様, そしてスポンサーの皆様のおかげで楽しいカンファレンスとなりました. ありがとうございました.</p>
<hr />
<h1>その他</h1>
<p>カンファレンスのスライドは,まとめてくださった方がおられるのでそちらを御覧ください.<br />
｢<a href="http://ikkitang1211.hatenablog.jp/entry/2016/07/16/145657">PHPカンファレンス関西2016 スライドリンク集 #phpkansai - お？意外といけるやん！</a>｣  </p>
<p>TogetterにPHPカンファレンス関西2016まとめがあります.<br />
｢<a href="http://togetter.com/li/1001000">PHPカンファレンス関西2016まとめ</a>｣</p>
<p>PHPカンファレンス関西に参加しようと考えた時に読んだ記事<br />
｢<a href="http://www.sigesaba.com/2014/06/phpkansai2014-relay05.php">ブラよろで学ぶPHPカンファレンス関西2014</a>｣</p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>demo</title>
<link href="/article/2016/07/demo"></link>
<id>urn:uuid:1d3fe443-518a-f427-75c3-45cb08feffe5</id>
<updated>2016-07-16T16:32:52+09:00</updated>
<summary type="html"><![CDATA[<h1>deom</h1>
<p>これはデモ用の記事です. 現在LT真っ最中です.<br />
<img src="/article/2016/07/demo/front.jpg" alt="" /></p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>Saoriの使い方</title>
<link href="/article/2016/07/152308"></link>
<id>urn:uuid:b6fc0d8e-e1ee-2061-6b11-b0775aa30092</id>
<updated>2016-07-15T23:08:00+09:00</updated>
<summary type="html"><![CDATA[<p>PHPを使ってgithub.ioでブログをやるための静的サイトジェネレータである<a href="https://github.com/hrgruri/saori">saori</a>の使い方を簡単にですがまとめました. リンクは<a href="/repository/saori">こちら</a>です.<br />
現在, 使い方だけなのでテーマの作成方法など内部的な話は書けていませんが近いうちに書きたいと思います.</p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>ブログのテーマを変えた</title>
<link href="/article/2016/07/081625"></link>
<id>urn:uuid:5597600c-4919-31e3-f790-fd8db57256b5</id>
<updated>2016-07-08T16:25:33+09:00</updated>
<summary type="html"><![CDATA[<p>ブログのテーマを変えました. ただそれだけです.</p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>学年暦のスクレイピングについて</title>
<link href="/article/2016/06/121113"></link>
<id>urn:uuid:268483fb-5977-e827-86e7-02540e5698ef</id>
<updated>2016-06-12T11:13:02+09:00</updated>
<summary type="html"><![CDATA[<p><a href="/article/2016/06/ritsucal/">前の記事</a>でPHPを使って,学年暦のスクレイピングを行うライブラリの紹介をしたので,今回はそれを作ったことの話をします. スクレイピングは<a href="https://github.com/FriendsOfPHP/Goutte">fabpot/goutte</a>を使用しました</p>
<h2>ページをローカルで動かす</h2>
<p>おそらくコード書いて1回では成功できず,何度も失敗すると思うので,負荷を与えないように対象のページをダウンロードしてローカルで動かしてそこにスクレイピングをしましょう.<br />
Chromeで 'Command(Control) + S'でダウンロードできます. ファイル名はindexでいいです. 次に動かし方ですが, PHPのビルトインサーバを使いましょう.</p>
<pre><code class="language-sh">cd public
php -S localhost:8000
</code></pre>
<p>詳しくは<a href="http://php.net/manual/ja/features.commandline.webserver.php">ここで</a>.</p>
<h2>スクレイピングをする</h2>
<h3>タイトル</h3>
<p>ブラウザで上記のlocalhostにアクセスをして学年暦のタイトル(ページのタイトルではない)を探します.</p>
<ol>
<li><p>2016年度　立命館大学　学年暦</p>
</li>
<li><p>2016年度　立命館大学大学院　学年暦 セメスター制
  （法学研究科、経済学研究科、経営学研究科、社会学研究科、文学研究科、国際関係研究科、政策科学研究科、応用人間科学研究科、言語教育情報研究科、公務研究科、スポーツ健康科学研究科、映像研究科、先端総合学術研究科）</p>
</li>
<li><p>2016年度　立命館大学大学院　学年暦 セメスター制
  （理工学研究科、情報理工学研究科、生命科学研究科、薬学研究科）</p>
</li>
<li><p>2016年度　立命館大学大学院　学年暦 セッション制
（テクノロジー・マネジメント研究科、経営管理研究科）</p>
</li>
<li><p>2016年度　立命館大学大学院　学年暦
  （法務研究科）</p>
</li>
</ol>
<p>この5つがあるので,これをタイトルとして,5つの学年暦を取得します. Chromeで右クリック→検証で構造を確かめられるので,見に行くとclass="mod-title type4"が割り振られているので</p>
<pre><code class="language-php">$title = $crawler-&gt;filter('.mod-title.type4')-&gt;eq($i)-&gt;text();
</code></pre>
<p>で得られます.</p>
<h3>年度</h3>
<p>年度ですが,これはタイトル内に書かれているので<a href="http://php.net/preg_match">preg_match()</a>を使って｢2016｣を拾ってあげます.</p>
<h3>各学年暦</h3>
<p>ここからがスクレイピングするのには面倒な構造になっています.というのも, 学部と大学院では構造が異なっているのです. 学部の方は, mod-wysiwyg &gt; set-table &gt; table内にtheadとtbodyが2つ(前期･後期)あります. 一方, 大学院の方はmod-wysiwyg &gt; set-table が2つ(前期･後期)です.<br />
eventはclass="event"ではなくテーブルの要素(イベント名･月･日)だと考えてください. mod-wysiwyは略.</p>
<p><img src="/article/2016/06/121113/structure.jpeg" alt="" /></p>
<p>これは不親切ですね. しかし,うまいこと下から順に配列を結合させていくと,5つの学年暦ができます. 考え方としては, 各学年暦にはset-tableが複数あり,tableの中にもtbodyが複数あることを前提に作るってことです.  結合やイベントのことなどは<a href="https://github.com/hrgruri/ritsucal/blob/master/src/Client.php">コード</a>を見てもらうほうがいいかと.  </p>
<p>同じ日の行事はまとめられているので注意してください.</p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>立命館の学年暦をスクレイピング</title>
<link href="/article/2016/06/ritsucal"></link>
<id>urn:uuid:abcf6d60-63c0-0d97-5c32-e586805ea753</id>
<updated>2016-06-11T18:42:03+09:00</updated>
<summary type="html"><![CDATA[<h1>ritsucal</h1>
<p>ritsucalは立命館大学･大学院の学年暦をスクレイピングするPHPのライブラリです. 前から作っていて<a href="https://github.com/hrgruri/ritsucal">GitHub</a>にあげていましたが,久しぶりに見るとREADME.mdに変な文字が混ざっていたので,いくつか修正して,そのついでに簡単な使い方を書きます.</p>
<h2>インストール</h2>
<p>インストールはcomposerからできます</p>
<pre><code class="language-sh">composer require hrgruri/ritsucal
</code></pre>
<h2>使い方</h2>
<pre><code class="language-php">&lt;?php
require 'vendor/autoload.php';
try {
    $client = new Hrgruri\Ritsucal\Client();
    $calenders = $client-&gt;getCalenders();
    var_dump($calenders);
} catch (\Hrgruri\Ritsucal\Exception\UrlException $e) {
    print "Error\n";
}
</code></pre>
<p>こんな感じでコードを書くと動きます. 得られるのは以下の学年暦.  </p>
<ol>
<li><p>2016年度　立命館大学　学年暦</p>
</li>
<li><p>2016年度　立命館大学大学院　学年暦 セメスター制
  （法学研究科、経済学研究科、経営学研究科、社会学研究科、文学研究科、国際関係研究科、政策科学研究科、応用人間科学研究科、言語教育情報研究科、公務研究科、スポーツ健康科学研究科、映像研究科、先端総合学術研究科）</p>
</li>
<li><p>2016年度　立命館大学大学院　学年暦 セメスター制
  （理工学研究科、情報理工学研究科、生命科学研究科、薬学研究科）</p>
</li>
<li><p>2016年度　立命館大学大学院　学年暦 セッション制
（テクノロジー・マネジメント研究科、経営管理研究科）</p>
</li>
<li><p>2016年度　立命館大学大学院　学年暦
  （法務研究科）</p>
</li>
</ol>
<p>var_dump()した結果の一部です</p>
<pre><code>array(5) {
  [0]=&gt;
  object(Hrgruri\Ritsucal\Calender)#66 (2) {
    ["title"]=&gt;
    string(40) "2016年度　立命館大学　学年暦"
    ["events"]=&gt;
    array(79) {
      [0]=&gt;
      object(Hrgruri\Ritsucal\Event)#111 (4) {
        ["year"]=&gt;
        int(2016)
        ["month"]=&gt;
        int(4)
        ["day"]=&gt;
        int(1)
        ["title"]=&gt;
        string(27) "前期セメスター開始"
      }
      [1]=&gt;
      object(Hrgruri\Ritsucal\Event)#65 (4) {
        ["year"]=&gt;
        int(2016)
        ["month"]=&gt;
        int(4)
        ["day"]=&gt;
        int(1)
        ["title"]=&gt;
        string(27) "オリエンテーション"
      }
</code></pre>
<p>デフォルトでは <a href="http://www.ritsumei.ac.jp/profile/info/calender/">http://www.ritsumei.ac.jp/profile/info/calender/</a> から情報を取ってきますが,</p>
<pre><code class="language-php">$calenders = $client-&gt;getCalenders('http://www.ritsumei.ac.jp/profile/info/calender/2016/');
</code></pre>
<p>などのようにすると別の年度の学年暦を取ってくることができます.</p>
<hr />
<p>追記 2016-06-25</p>
<h2>JSON</h2>
<p>他の言語でもデータを扱うためにJSON形式で保存する方法です. </p>
<pre><code class="language-php">&lt;?php
require 'vendor/autoload.php';
try {
    $client = new Hrgruri\Ritsucal\Client();
    $calenders = $client-&gt;getCalenders();
    file_put_contents(
        'file_path',
        json_encode($calenders, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE)
    );
} catch (\Hrgruri\Ritsucal\Exception\UrlException $e) {
    print "Error\n";
}
</code></pre>
<p><a href="http://php.net/file_put_contents">file_put_contents()</a>で指定したところに保存できます. <a href="http://php.net/json_encode">json_encode()</a>のJSON_PRETTY_PRINT, JSON_UNESCAPED_UNICODEは見やすい形にしてくれるオプションです.</p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>Saori v0.5を作った</title>
<link href="/article/2016/06/102235"></link>
<id>urn:uuid:65a453e3-79a3-ccbd-085a-bc8729a31881</id>
<updated>2016-06-10T22:35:58+09:00</updated>
<summary type="html"><![CDATA[<p>Saori v0.5.0をリリースした. これで簡単にユーザが新たなページを生成することができるようになった. そして,<a href="http://hrgruri.github.io/article/2016/06/042227/">前の記事</a>で言っていたテーブルがおかしい理由はテーブルのCSSが記述されていなかったからでした. ボーダの設定を指定なかったので,枠線がない状態で出力されていただけでした.</p>
<hr />
<p>そろそろv0.x系をやめてv1.0にしてもいい頃かもしれない. 最初に思っていた必要な最低限の機能はできたと思う.<br />
それとちゃんとした使い方をまとめて記事かページを生成する必要がある. 今のところ他の人が使うのには不親切だ. README.mdには記事の編集のことしか記述していない. (誰か作る人がいるのかわからないが)テーマの作り方やユーザページについてなど. こういったものをまとめ終えたらv1.0.0にしたいと思います.</p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>Saori v0.5.x-devにてTableがおかしい</title>
<link href="/article/2016/06/042227"></link>
<id>urn:uuid:34a591c2-3e2d-b7f2-4ee6-8c45e35f7a42</id>
<updated>2016-06-04T22:27:39+09:00</updated>
<summary type="html"><![CDATA[<p>現在Saoriのv0.5を作っていますが, どうやらテーブルが正しく表示されないです.</p>
<pre><code class="language-markdown">|name|値|
|:-:|:-:|
|f85|キーワード|
|f23|絵師|
|f83|画題|
</code></pre>
<p>上記の記述をしたら以下の様なテーブルが生成されました.</p>
<p><img src="/article/2016/06/042227/table.png" alt="" /></p>
<p>罫線が入っていないので,テーブルとしてわかりにくくなっています. 今のところ原因がわかっていません. Atomの上では正しく表示されているので記述に間違いはないのではないかとは思います. cebe/markdownを使ってMarkdownを変換しています. とりあえず他のライブラリを使ってみてどう表示されるのか試してみます. あとHTMLも確認してみたいと思います.</p>
<p>ちなみにv0.5.x-devでは記事とユーザページ(contents/page/NAME.md)の画像ファイルのパスの書き換えはできるようになりました. </p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>立命館ARCのスクレイピング</title>
<link href="/article/2016/06/arc"></link>
<id>urn:uuid:aeac6c74-1a6f-a261-d81d-872fb3ee9355</id>
<updated>2016-06-02T21:12:11+09:00</updated>
<summary type="html"><![CDATA[<h1>PHPでスクレイピング</h1>
<p>創成3では立命館大学アート・リサーチセンター(以下ARC)のアクセスログを使って資料の推薦を行うことが目的でした. 最初はリンクだけを使った質素なものを作る予定でしたが, 途中でスクレイピングをして, サイト内だけで簡単な検索･閲覧をできるようにすることになりました. PHPを使ってやったのですが,これがとっても大変でした.</p>
<h2>謎のname</h2>
<p>HTMLのFormのほとんどにはname属性がつけられています.</p>
<pre><code class="language-html">&lt;input type="text" name="username"&gt;
</code></pre>
<p>nameからどういった値が入るのか推測できるようになっているべきです.上の例だとユーザ名が入るのだと推測できます. しかしながらARCのフォームでは全くそれがなされていなかった.</p>
<h3>浮世絵データベース</h3>
<table>
<thead>
<tr><th align="center">name</th><th align="center">値</th></tr>
</thead>
<tbody>
<tr><td align="center">f85</td><td align="center">キーワード</td></tr>
<tr><td align="center">f23</td><td align="center">絵師</td></tr>
<tr><td align="center">f83</td><td align="center">画題</td></tr>
</tbody>
</table>
<h3>古典籍データベース</h3>
<table>
<thead>
<tr><th align="center">name</th><th align="center">値</th></tr>
</thead>
<tbody>
<tr><td align="center">f61</td><td align="center">資料名</td></tr>
<tr><td align="center">f63</td><td align="center">編著者</td></tr>
</tbody>
</table>
<p>まったく謎です. ちなみに浮世絵DBの絵師であるf23ですが,古典籍DBでは資料のソート(成立月日順)のために使われています.
ちなみに統一されているものも一応あります.</p>
<table>
<thead>
<tr><th align="center">name</th><th align="center">値</th></tr>
</thead>
<tbody>
<tr><td align="center">-max</td><td align="center">表示件数</td></tr>
<tr><td align="center">skip</td><td align="center">スキップ数</td></tr>
</tbody>
</table>
<p>この2つは推測できますね. なぜかmaxではなく-maxですが. 統一されておらず,推測できないのはスクレイピングする側としては辛いですね. サーバサイドのコードを書くに扱いづらくなかったのでしょうか?</p>
<h2>作ったライブラリ</h2>
<p>オープンキャンパスのために創成3のサイトを再び作っているので使っているが, それさえ終わればもう使うことはないと思う. <a href="https://github.com/hrgruri/rarcs">GitHub</a>にアップロードしています. またComposerからインストールして使うことができます.</p>
<pre><code class="language-sh">composer require hrgruri/rarcs
</code></pre>
<pre><code class="language-php">&lt;?php
require 'vendor/autoload.php';

$client = new Hrgruri\Rarcs\NishikieClient();
var_dump($client-&gt;getDetail('arcUP2435'));
/*
object(Hrgruri\Rarcs\Asset\Nishikie)#51 (5) {
  ["artist"]=&gt;
  string(6) "広貞"
  ["id"]=&gt;
  string(9) "arcUP2435"
  ["url"]=&gt;
  string(62) "http://www.dh-jac.net/db/nishikie/results-big.php?f1=arcUP2435"
  ["title"]=&gt;
  string(54) "「菅原　三ノ口」「松王丸」「梅王丸」"
  ["cover"]=&gt;
  string(87) "http://www.arc.ritsumei.ac.jp/archive01/theater/image/PB/arc/Prints/arcUP/arcUP2435.jpg"
}
 */
</code></pre>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>Saori v0.4.0を作りました</title>
<link href="/article/2016/05/301402"></link>
<id>urn:uuid:0d67959e-4782-4b3a-ff12-614f7faba226</id>
<updated>2016-05-30T14:02:18+09:00</updated>
<summary type="html"><![CDATA[<p>v0.4.0での変更点は</p>
<ul>
<li>Twigファイルの場所の変更</li>
<li>config.jsonの場所を変更</li>
<li>ユーザページの生成機能</li>
</ul>
<h2>Twigファイルの場所の変更について</h2>
<p>Twigファイルの場所をtheme/:theme_name/twig/にしました. サイトを生成するのに必要なテンプレートはtemplate内に置きました.これからはsaoriが直接呼び出すTwigファイルはここにおいていこうと思います.  </p>
<h2>config.jsonの場所を変更について</h2>
<p>contentsディレクトリ内にconfig.jsonを設置するように変更しました. 何故したかというと,config.jsonもgitで管理しやすくするためです.</p>
<h2>ユーザページの生成機能について</h2>
<p>それと<a href="/article/2016/04/261251/">前に言ってた</a>,ユーザがMarkdownファイルを作るだけでページを生成できるようにしました. 例えば,contents/page/about.mdというファイルを作るとtemplate/page.twigを利用して,/about/index.htmlが作られます. しかしこれだと画像が扱えない(作ってから気づいた)ので,v0.5では画像をどこかにコピーしてMarkdownファイル内にある画像のパスをそこに書き換えようかな思います.</p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>icd3</title>
<link href="/article/2016/04/icd3"></link>
<id>urn:uuid:506a45d2-9b63-127f-d54e-0f30184aaa72</id>
<updated>2016-04-29T23:40:52+09:00</updated>
<summary type="html"><![CDATA[<p>先生｢創成3で作ってもらったサイトをオープンキャンパスで見せようと思う｣<br />
私｢あっ,はい. ちゃんとしたコードに直したかったので, 修正したら渡します｣<br />
先生｢それなんだけどね, 今のままだと書籍だけで見た感じが微妙だから絵も推薦できるようにして. 7月末までにしておいてね｣</p>
<p>こんなわけで,前に作ったサイトの見た目をとかを修正するだけだったつもりが, 先生からのお願い(?)で推薦対象となるカテゴリーを増やすことになりました.<br />
追加することになったのは浮世絵. 浮世絵のログは抽出してDBに保存していなかったので,もう一度アクセスログの解析をすることになりました. クローラなどのログはすでに落としてあるのがあったと思うので,そこからもう一度.</p>
<p><Font color="red">I Love PHP</font> なのでもちろんPHPを使います. スクレイピングもPHPです. スクレイピングのコードも前まではクラスを作ってそれを使っていただけだったのですが, 今回はComposerでインストールして使えるようにして公開したいと思います.</p>
<p>実行環境は,今日,研究室に立てたUbuntu Serverを使おうかなと. 開発段階では研究室のみからアクセスできるようにしておけばいい. オープンキャンパスの時のみ,大学のIPだけを通すようにするとか考えたが... 前回と同様にデータを先生に渡すだけになるのかな</p>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>Saori v0.3を作った</title>
<link href="/article/2016/04/261251"></link>
<id>urn:uuid:4352bc72-9893-69fd-374b-aa57f31f3822</id>
<updated>2016-04-26T12:51:20+09:00</updated>
<summary type="html"><![CDATA[<p>Saoriにいくつか機能を加えた.</p>
<h2>v0.2</h2>
<p>v0.2ではフィード(/feed.atom)を生成するようにしたり,簡単なタグ機能を加えた.</p>
<h2>v0.3</h2>
<p>v0.3では機能の追加ではなく,コードを分けたり修正したりした.あと生成する際に使用するtwigファイルの場所を変更したので,v0.2からv0.3でテーマの互換性がないですが,sampleテーマは直した.</p>
<h2>v0.4でしたいこと</h2>
<p>v0.4ではconfig.jsonの場所をcontentsの中にしたい. あとinitでconfig.jsonファイルの生成も. 機能としてはテーマが設定したページを作れるようにしたり,ユーザがMarkdownファイルを作るだけで設定されたテンプレートからページを生成できるようにしたい.  </p>
<hr />
<p>現在アクセスできるのは</p>
<ul>
<li>/page/:page_number</li>
<li>/article/:year/:month/:title</li>
<li>/tag</li>
<li>/tag/:tag_name/:page_number</li>
</ul>
]]></summary>
</entry>
<entry>
<author><name>Yuya Aratani</name>
</author>
<title>Saori v0.1.0のリリース</title>
<link href="/article/2016/04/saori"></link>
<id>urn:uuid:776e69e3-34bd-db10-cb23-ce3ac961208d</id>
<updated>2016-04-24T18:53:20+09:00</updated>
<summary type="html"><![CDATA[<h2>Saoriについて</h2>
<p>SaoriというPHPを使った簡単なサイトジェネレータを作りました.現在のバージョンはv0.1.0です.これで,PHP動かない場所(たとえばusername.github.io)でもブログを公開できます. 仕組みとしてはローカルでPHPを使ってHTMLを生成して,それを公開するって流れです.<br />
現在,テーマはsampleしかないのです.これでは1ページあたりの記事の数は5つとなっています.
使い方は<a href="https://github.com/hrgruri/saori">GitHub</a>で.まだまだ開発途中で,追加したい機能がいくつかあるのでがんばります.  </p>
<pre><code class="language-sh">composer install hrgruri/saori
</code></pre>
<h3>機能</h3>
<ul>
<li>各記事用のページの生成(/article/:year/:month/title)</li>
<li>記事(N件)ごとのページを生成(/page/:page_number)</li>
</ul>
<h3>予定</h3>
<p>各記事に対する設定でタグの欄があるのですが,Saoriの機能ではタグ一覧取得,タグ用のページの生成がないので,タグ機能を加えようと思います.<br />
フィード機能(ATOM/RSS)がまだできていないので,それもできればいいかなと思っています.</p>
<hr />
<p>プログラムの話は全くしていないので,それに関しては近いうちに別の記事でします.</p>
]]></summary>
</entry>
</feed>